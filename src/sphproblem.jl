
function GPUCellListSPH.zero(::Type{NTuple{2, T}}) where T
    (zero(T), zero(T))
end

function GPUCellListSPH.zero(::Type{NTuple{3, T}}) where T
    (zero(T), zero(T), zero(T))
end

function gravvec(g::T, dim::Int) where T
    if dim == 2
        return (zero(T), g)
    elseif dim == 3
        return (zero(T), g, zero(T))
    end
    (g,)
end

abstract type SimWorkLoad end
struct StepByStep <: SimWorkLoad end
struct Effective  <: SimWorkLoad end

"""
    SPHProblem(system::GPUCellList, h::Float64, H::Float64, sphkernel::AbstractSPHKernel, œÅ, v, ptype, œÅ‚ÇÄ::Float64, m‚ÇÄ::Float64, Œît::Float64, Œ±::Float64, g::Float64, c‚ÇÄ::Float64, Œ≥, Œ¥·µ©::Float64, CFL::Float64; s::Float64 = 0.0)

SPH simulation data structure.
"""
mutable struct SPHProblem{T}
    system::GPUCellList
    dim::Int
    h::T                                  # smoothing length
    h‚Åª¬π::T
    H::T                                  # kernel support radius (2h)
    H‚Åª¬π::T
    sphkernel::AbstractSPHKernel                # SPH kernel from SPHKernels.jl
    ‚àëW::CuArray                                 # sum of kernel values
    ‚àë‚àáW                                         # sum of kernel gradients
    W::CuArray                                  # values of kernel gradient for each pair 
    ‚àáW::CuArray                                 # values of kernel gradient for each pair 
    ‚àë‚àÇŒ†‚àÇt                                       # artificial viscosity
    ‚àë‚àÇv‚àÇt                                       # acceleration (momentum equation)
    ‚àë‚àÇœÅ‚àÇt                                       # rho diffusion - density derivative function (with diffusion)
    ‚àëŒîvdpc                                      # velocity dynamic particle collision correction 
    œÅ::CuArray                                  # rho
    œÅŒît¬Ω::CuArray                               # rho at t¬Ω  
    v::CuArray                                  # velocity
    vŒît¬Ω::CuArray                               # velocity at t¬Ω  
    xŒît¬Ω::CuArray                               # coordinates at xŒît¬Ω
    P::CuArray                                  # pressure (Equation of State in Weakly-Compressible SPH)
    ptype::CuArray                              # particle type: 1 - fluid 1; 0 - boundary; -1 boundary hard layer 
    œÅ‚ÇÄ::T                                 # Reference density
    m‚ÇÄ::T                                 # Initial mass
    Œît::T                                 # default Œît
    Œ±::T                                  # Artificial viscosity alpha constant
    g::T                                  # gravity constant
    c‚ÇÄ::T                                 # speed of sound
    Œ≥                                           # Gamma, 7 for water (used in the pressure equation of state)
    s::T                                  # surface tension constant
    Œ¥·µ©::T                                 # Coefficient for density diffusion, typically 0.1
    CFL::T                                # CFL number for the simulation 
    buf::CuArray                                # buffer for dt calculation
    etime::T                              # simulation time
    cŒîx                                         # cumulative location changes in batch
    nui::T                                # non update interval, update if maximum(maximum.(abs, prob.cŒîx)) > 0.9 * prob.nui  
    # Dynamic Particle Collision (DPC) 
    dpc_l‚ÇÄ::T       # minimal distance
    dpc_pmin::T     # minimal pressure
    dpc_pmax::T     # maximum pressure
    dpc_Œª::T        # Œª is a non-dimensional adjusting parameter
    function SPHProblem(system::GPUCellList{T}, h::Float64, H::Float64, sphkernel::AbstractSPHKernel, œÅ, v, ptype, œÅ‚ÇÄ::Float64, m‚ÇÄ::Float64, Œît::Float64, Œ±::Float64, g::Float64, c‚ÇÄ::Float64, Œ≥, Œ¥·µ©::Float64, CFL::Float64; s::Float64 = 0.0) where T <: AbstractFloat

        dim = length(CUDA.@allowscalar first(system.points))
        N   = length(system.points)

        ‚àëW      = CUDA.zeros(T, N)
        ‚àë‚àáW     = Tuple(CUDA.zeros(T, N) for n in 1:dim)
        W       = CUDA.zeros(T, length(system.pairs))
        ‚àáW      = CUDA.fill(zero(NTuple{dim, T}), length(system.pairs))
        ‚àë‚àÇœÅ‚àÇt   = CUDA.zeros(T, N)

        ‚àë‚àÇŒ†‚àÇt   = Tuple(CUDA.zeros(T, N) for n in 1:dim)

        ‚àë‚àÇv‚àÇt   = Tuple(CUDA.zeros(T, N) for n in 1:dim)

        ‚àëŒîvdpc = Tuple(CUDA.zeros(T, N) for n in 1:dim)

        buf     = CUDA.zeros(T, N)

        œÅŒît¬Ω    = CUDA.deepcopy(œÅ)
        vŒît¬Ω    = CUDA.deepcopy(v)
        xŒît¬Ω    = CUDA.deepcopy(system.points)
        cŒîx     = Tuple(CUDA.zeros(T, N) for n in 1:dim)
        P       = CUDA.zeros(T, N)
        new{T}(system, 
        dim, 
        h, 
        1/h, 
        H, 
        1/H, 
        sphkernel, 
        ‚àëW, 
        ‚àë‚àáW, 
        W, 
        ‚àáW, 
        ‚àë‚àÇŒ†‚àÇt, 
        ‚àë‚àÇv‚àÇt, 
        ‚àë‚àÇœÅ‚àÇt, 
        ‚àëŒîvdpc, 
        œÅ, 
        œÅŒît¬Ω, 
        v, 
        vŒît¬Ω, 
        xŒît¬Ω, 
        P, 
        ptype, 
        œÅ‚ÇÄ, 
        m‚ÇÄ, 
        Œît, 
        Œ±, 
        g, 
        c‚ÇÄ, 
        Œ≥, 
        s, 
        Œ¥·µ©, 
        CFL, 
        buf, 
        0.0, 
        cŒîx, 
        system.dist - H, 
        0.0, 
        1.0, 
        10000.0, 
        0.01)
    end
end

"""
    stepsolve!(prob::SPHProblem, n::Int = 1; timecall = nothing, timestepping = false, timelims = (-Inf, +Inf))

Make n itarations. 

timestepping - call Œît_stepping for adjust Œît

timelims - minimal and maximum values for Œît
"""
function stepsolve!(prob::SPHProblem, n::Int = 1; simwl::SimWorkLoad = StepByStep(), kwargs...)
    _stepsolve!(prob, n, simwl;  kwargs...)
end
function _stepsolve!(prob::SPHProblem{T}, n::Int, ::StepByStep; timestepping = false, timelims = (sqrt(eps()), prob.CFL * prob.H /3prob.c‚ÇÄ), verbode = true) where T
    if timestepping && timelims[1] > timelims[1] error("timelims[1] should be < timelims[2]") end

    x              = prob.system.points
    pairs          = neighborlist(prob.system)
    skipupdate     = false
    updaten        = 0
    skipupdaten    = 0
    maxcŒîx         = 0.0
    maxcŒîxout      = 0.0

    dpckernlim = find_zero(x-> 1.0 - ùí≤(prob.sphkernel, x, 1.0), 0.5)

    for iter = 1:n
        if skipupdate 
            skipupdaten += 1
        else
            update!(prob.system)
            x           = prob.system.points
            pairs       = neighborlistview(prob.system)
            #sort!(pairs, by = first)
            for a in prob.cŒîx fill!(a, zero(T)) end
            skipupdate  = true
            updaten += 1 
        end


        fill!(prob.‚àë‚àÇœÅ‚àÇt, zero(T))

        fill!(prob.‚àë‚àÇŒ†‚àÇt[1], zero(T))
        fill!(prob.‚àë‚àÇv‚àÇt[1], zero(T))
        #fill!(prob.‚àë‚àÇv‚àÇtdpc[1], zero(Float64))

        fill!(prob.‚àë‚àÇŒ†‚àÇt[2], zero(T))
        fill!(prob.‚àë‚àÇv‚àÇt[2], zero(T))
        #fill!(prob.‚àë‚àÇv‚àÇtdpc[2], zero(Float64))


        if length(prob.‚àáW) != length(pairs)
            CUDA.unsafe_free!(prob.‚àáW)
            CUDA.unsafe_free!(prob.W)
            prob.‚àáW =  CUDA.fill((zero(T), zero(Float64)), length(pairs)) # DIM = 2
            prob.W =  CUDA.fill(zero(T), length(pairs))
        end
        # kernels for each pair
        W_2d!(prob.W, pairs, x, prob.sphkernel, prob.H‚Åª¬π)
        # kernels gradientfor each pair
        ‚àáW_2d!(prob.‚àáW, pairs, x, prob.sphkernel, prob.H‚Åª¬π)
        # density derivative with density diffusion
        ‚àÇœÅ‚àÇtDDT!(prob.‚àë‚àÇœÅ‚àÇt, prob.‚àáW, pairs, x, prob.h, prob.m‚ÇÄ, prob.Œ¥·µ©, prob.c‚ÇÄ, prob.Œ≥, prob.g, prob.œÅ‚ÇÄ, prob.œÅ, prob.v, prob.ptype) 
        # artificial viscosity
        ‚àÇŒ†‚àÇt!(prob.‚àë‚àÇŒ†‚àÇt, prob.‚àáW, pairs, x, prob.h, prob.œÅ, prob.Œ±, prob.v, prob.c‚ÇÄ, prob.m‚ÇÄ)
        #  pressure
        pressure!(prob.P, prob.œÅ, prob.c‚ÇÄ, prob.Œ≥, prob.œÅ‚ÇÄ, prob.ptype) 
        # momentum equation 
        ‚àÇv‚àÇt!(prob.‚àë‚àÇv‚àÇt,  prob.‚àáW, prob.P, pairs,  prob.m‚ÇÄ, prob.œÅ) 
        # add gravity and artificial viscosity 
        completed_‚àÇv‚àÇt!(prob.‚àë‚àÇv‚àÇt, prob.‚àë‚àÇŒ†‚àÇt,  gravvec(prob.g, prob.dim)) 
        # add surface tension if s > 0
        if prob.s > 0
            ‚àÇv‚àÇtpF!(prob.‚àë‚àÇv‚àÇt, pairs, x, prob.s, prob.h, prob.m‚ÇÄ, prob.ptype) 
        end
        
        # following steps (update_œÅ!, update_vp‚àÇv‚àÇtŒît!, update_xpvŒît!) can be done in one kernel 
        # calc œÅ at Œît¬Ω
        update_œÅ!(prob.œÅŒît¬Ω, prob.‚àë‚àÇœÅ‚àÇt, prob.Œît * 0.5, prob.œÅ‚ÇÄ, prob.ptype)
        # calc v at Œît¬Ω
        update_vp‚àÇv‚àÇtŒît!(prob.vŒît¬Ω, prob.‚àë‚àÇv‚àÇt, prob.Œît * 0.5, prob.ptype) 
        # calc x at Œît¬Ω
        update_xpvŒît!(prob.xŒît¬Ω, prob.vŒît¬Ω, prob.Œît * 0.5)

        # set derivative to zero for Œît¬Ω calc

        fill!(prob.‚àë‚àÇœÅ‚àÇt, zero(T))

        fill!(prob.‚àë‚àÇŒ†‚àÇt[1], zero(T))
        fill!(prob.‚àë‚àÇv‚àÇt[1], zero(T))
        fill!(prob.‚àëŒîvdpc[1], zero(T))

        fill!(prob.‚àë‚àÇŒ†‚àÇt[2], zero(T))
        fill!(prob.‚àë‚àÇv‚àÇt[2], zero(T))
        fill!(prob.‚àëŒîvdpc[2], zero(T))

        # density derivative with density diffusion at  xŒît¬Ω 
        ‚àÇœÅ‚àÇtDDT!(prob.‚àë‚àÇœÅ‚àÇt,  prob.‚àáW, pairs, prob.xŒît¬Ω, prob.h, prob.m‚ÇÄ, prob.Œ¥·µ©, prob.c‚ÇÄ, prob.Œ≥, prob.g, prob.œÅ‚ÇÄ, prob.œÅ, prob.v, prob.ptype) 
        # artificial viscosity at xŒît¬Ω 
        ‚àÇŒ†‚àÇt!(prob.‚àë‚àÇŒ†‚àÇt, prob.‚àáW, pairs, prob.xŒît¬Ω, prob.h, prob.œÅ, prob.Œ±, prob.v, prob.c‚ÇÄ, prob.m‚ÇÄ)
        #  pressure
        pressure!(prob.P, prob.œÅ, prob.c‚ÇÄ, prob.Œ≥, prob.œÅ‚ÇÄ, prob.ptype) 
        # momentum equation 
        ‚àÇv‚àÇt!(prob.‚àë‚àÇv‚àÇt, prob.‚àáW, prob.P, pairs,  prob.m‚ÇÄ, prob.œÅ)
        # add gravity and artificial viscosity
        completed_‚àÇv‚àÇt!(prob.‚àë‚àÇv‚àÇt, prob.‚àë‚àÇŒ†‚àÇt, gravvec(prob.g, prob.dim))
        # add surface tension if s > 0
        if prob.s > 0
            ‚àÇv‚àÇtpF!(prob.‚àë‚àÇv‚àÇt, pairs, prob.xŒît¬Ω, prob.s, prob.h, prob.m‚ÇÄ, prob.ptype) 
        end
        # update all with symplectic position Verlet scheme
        update_all!(prob.œÅ, prob.œÅŒît¬Ω, prob.v, prob.vŒît¬Ω, x, prob.xŒît¬Ω, prob.‚àë‚àÇœÅ‚àÇt, prob.‚àë‚àÇv‚àÇt, prob.Œît, prob.cŒîx, prob.œÅ‚ÇÄ, prob.ptype)
        
        # Dynamic Particle Collision (DPC) 
        if prob.dpc_l‚ÇÄ > 0 && prob.dpc_Œª > 0
            dpcreg!(prob.‚àëŒîvdpc, prob.v, prob.œÅ, prob.P, pairs, x, prob.sphkernel, prob.dpc_l‚ÇÄ, prob.dpc_pmin, prob.dpc_pmax, prob.Œît, prob.dpc_Œª, dpckernlim)  
            update_dpcreg!(prob.v, x, prob.‚àëŒîvdpc, prob.Œît, prob.ptype)
        end

        maxcŒîx = maximum(maximum.(abs, prob.cŒîx))
        if maxcŒîx > 0.9 * prob.nui  
            skipupdate = false 
        end
        maxcŒîxout     = max(maxcŒîxout, maxcŒîx)
        
        prob.etime += prob.Œît

        if timestepping
            prob.Œît = Œît_stepping(prob.buf, prob.‚àë‚àÇv‚àÇt, prob.v, x, prob.c‚ÇÄ, prob.h, prob.CFL, timelims)
        end

    end
    # update summs and gradiends after bath 
    fill!(prob.‚àëW, zero(T))
    fill!(prob.‚àë‚àáW[1], zero(T))
    fill!(prob.‚àë‚àáW[2], zero(T))
    ‚àëW_2d!(prob.‚àëW, pairs, x, prob.sphkernel, prob.H‚Åª¬π)
    ‚àë‚àáW_2d!(prob.‚àë‚àáW, pairs, x, prob.sphkernel, prob.H‚Åª¬π)
    updaten, maxcŒîxout
end


function get_points(prob::SPHProblem)
    prob.system.points
end

function get_velocity(prob::SPHProblem)
    prob.v
end

function get_density(prob::SPHProblem)
    prob.œÅ
end

function get_pressure(prob::SPHProblem)
    prob.P
end

function get_acceleration(prob::SPHProblem)
    prob.‚àë‚àÇv‚àÇt
end

function get_dpccorr(prob::SPHProblem)
    prob.‚àëŒîvdpc
end

function get_simtime(prob::SPHProblem)
    prob.etime
end

function get_dt(prob::SPHProblem)
    prob.Œît
end

function get_sumw(prob::SPHProblem)
    prob.‚àëW
end

function get_sumgradw(prob::SPHProblem)
    prob.‚àë‚àáW
end

"""
    timesolve!(prob::SPHProblem; batch = 10, 
    timeframe = 1.0, 
    writetime = 0, 
    path = nothing, 
    pvc = false, 
    vtkvars = ["Acceleration", "Velocity", "Pressure"],
    timestepping = false, 
    timelims = (-Inf, +Inf), 
    anim = false,
    plotsettings = Dict(:leg => false)) 

Make simulation by `batch` iterations within `timeframe`. 

writetime - time interval for write vtk / animation.

path - path to export directory.

pvc - make PVD file.

vtkvars - variables for export, full list:  `["Acceleration", "Velocity", "Pressure", "Density", "‚àëW", "‚àë‚àáW", "DPC"]` 

anim - make animation.

showframe - show animation each frame.

plotsettings - keywords for plotting.
"""
function timesolve!(prob::SPHProblem; batch = 10, timeframe = 1.0, 
    writetime = 0, 
    path = nothing, 
    pvc::Bool = false, 
    vtkvars = ["Acceleration", "Velocity", "Pressure"],
    timestepping = false, 
    timelims = (sqrt(eps()), prob.CFL * prob.H /3prob.c‚ÇÄ), 
    anim::Bool = false, 
    showframe::Bool = true, 
    verbose = true, 
    plotsettings = Dict(:leg => false)) 

    if timelims[2] > prob.CFL * prob.H /3prob.c‚ÇÄ 
        @warn "Maximum dt limit ($(timelims[2])) > CFL*H/3c‚ÇÄ ($(prob.CFL * prob.H /3prob.c‚ÇÄ))" 
    end
    if timestepping timelims = (max(timelims[1], eps()), min(timelims[2], prob.CFL * prob.H /3prob.c‚ÇÄ, prob.Œît)) end
    if verbose
        println("    Start simulation...")
        println("Timestepping: $timestepping")
        if timestepping println("Œît limitss: $timelims") end
        println("Batch: $batch")
        println("NUI: $(prob.nui)")
        
    end
    nt = prob.etime + writetime
    i  = 0
    if writetime > 0 && !isnothing(path)
        expdict                 = Dict()
        cpupoints               = Array(get_points(prob))
        coordsarr               = [map(x -> x[i], cpupoints) for i in 1:length(first(cpupoints))]
        if "Density"      in vtkvars expdict["Density"]      = Array(get_density(prob)) end
        if "Pressure"     in vtkvars expdict["Pressure"]     = Array(get_pressure(prob)) end
        if "Acceleration" in vtkvars expdict["Acceleration"] = Array.(get_acceleration(prob)) end
        if "Velocity" in vtkvars 
            av                      = Array(get_velocity(prob))
            expdict["Velocity"]     = permutedims(hcat([map(x -> x[i], av) for i in 1:length(first(av))]...))
        end
        if "‚àëW" in vtkvars expdict["‚àëW"]           = Array(get_sumw(prob)) end
        if "‚àë‚àáW" in vtkvars expdict["‚àë‚àáW"]         = Array.(get_sumgradw(prob)) end
        if "DPC" in vtkvars expdict["DPC"]         = Array.(get_dpccorr(prob)) end
       
        if pvc
            pvd = paraview_collection(joinpath(path, "OUTPUT_PVC"))
        else
            pvd = nothing
        end
        create_vtp_file(joinpath(path, "OUTPUT_"*lpad(i, 5, "0")), coordsarr, expdict, pvd, prob.etime)
    end
    prog = ProgressUnknown(desc = "Calculating...:", spinner=true, showspeed=true)

    if anim
        animation = Animation()
    end    

    local diaginf
    
    while prob.etime <= timeframe
       
        diaginf = stepsolve!(prob, batch; timestepping = timestepping, timelims = timelims)

        if writetime > 0  && nt < prob.etime
            nt += writetime

            if !isnothing(path)
                expdict                 = Dict()
                cpupoints               = Array(get_points(prob))
                coordsarr               = [map(x -> x[i], cpupoints) for i in 1:length(first(cpupoints))]
                if "Density"      in vtkvars expdict["Density"]      = Array(get_density(prob)) end
                if "Pressure"     in vtkvars expdict["Pressure"]     = Array(get_pressure(prob)) end
                if "Acceleration" in vtkvars expdict["Acceleration"] = Array.(get_acceleration(prob)) end
                 if "Velocity" in vtkvars 
                    av                      = Array(get_velocity(prob))
                    expdict["Velocity"]     = permutedims(hcat([map(x -> x[i], av) for i in 1:length(first(av))]...))
                end
                if "‚àëW" in vtkvars expdict["‚àëW"]           = Array(get_sumw(prob)) end
                if "‚àë‚àáW" in vtkvars expdict["‚àë‚àáW"]         = Array.(get_sumgradw(prob)) end
                if "DPC" in vtkvars expdict["DPC"]         = Array.(get_dpccorr(prob)) end

                create_vtp_file(joinpath(path, "OUTPUT_"*lpad(i, 5, "0")), coordsarr, expdict, pvd, prob.etime)
            end
            if anim
                ax = map(x->x[1], cpupoints)
                ay = map(x->x[2], cpupoints) 
                p = scatter(ax, ay; plotsettings...)
                if showframe display(p) end
                frame(animation, p)
            end
        end

        i += 1
        next!(prog, spinner="üåëüåíüåìüåîüåïüåñüåóüåò", showvalues = [(:iter, i), (:time, prob.etime), (:Œît, prob.Œît), (Symbol("updn"), diaginf[1]), (:dxpncu, diaginf[2])])
    end

    if writetime > 0 && !isnothing(path) 
        if pvc
            vtk_save(pvd)
        end
        if anim
            fps = Int(ceil(1/writetime))
            gif(animation, joinpath(path, "anim_output_fps$(fps).gif"), fps = fps)
        end
    end
    finish!(prog)
end


function Base.show(io::IO, p::SPHProblem)
    println(io, "  SPH Problem ")
    println(io, p.system)
    println(io, "  h: ", p.h)
    println(io, "  H: ", p.H)
    println(io, "  SPH Kernel: ", p.sphkernel)
    println(io, "  E Time: ", p.etime)
    if p.s > 0 
        println(io, "  Surface tension: ", p.s)
    else
        println(io, "  Surface tension: not used")
    end
    if p.dpc_l‚ÇÄ > 0 && p.dpc_Œª > 0 
        println(io, "  DPC: l‚ÇÄ = ", p.dpc_l‚ÇÄ, " , Œª = ", p.dpc_Œª)
    else
        println(io, "  DPC: not used")
    end
end


