#####################################################################
# CELL LIST
#####################################################################
function kernel_cellmap_2d!(pcell, cellpnum, points,  h‚Åª¬π, offset) 
    i = threadIdx().x + (blockIdx().x - 1) * blockDim().x
    cs·µ¢ = size(cellpnum, 1) 
    cs‚±º = size(cellpnum, 2) 
    if i <= length(points)
        @fastmath  p‚ÇÅ =  (points[i][1] - offset[1]) * h‚Åª¬π[1]
        @fastmath  p‚ÇÇ =  (points[i][2] - offset[2]) * h‚Åª¬π[2]
        p·µ¢‚ÇÅ = ceil(Int32, min(max(p‚ÇÅ, 1), cs·µ¢)) 
        p·µ¢‚ÇÇ = ceil(Int32, min(max(p‚ÇÇ, 1), cs‚±º))
        # maybe add check:  is particle in simulation range? and include only if in simulation area
        pcell[i] = (p·µ¢‚ÇÅ, p·µ¢‚ÇÇ)

        CUDA.@atomic cellpnum[p·µ¢‚ÇÅ, p·µ¢‚ÇÇ] += one(Int32) 
    end
    return nothing
end
"""
    cellmap_2d!(pcell, cellpnum, points,  h, offset)  

Map each point to cell and count number of points in each cell.

For each coordinates cell number calculated:

```julia
cs·µ¢ = size(cellpnum, 1) 
p‚ÇÅ  =  (x‚ÇÅ - offset‚ÇÅ) * h‚ÇÅ‚Åª¬π
p·µ¢‚ÇÅ = ceil(min(max(p‚ÇÅ, 1), cs·µ¢))
```

"""
function cellmap_2d!(pcell, cellpnum, points,  h, offset)  
    h‚Åª¬π = (1/h[1], 1/h[2])
    kernel = @cuda launch=false kernel_cellmap_2d!(pcell, cellpnum, points,  h‚Åª¬π, offset) 
    config = launch_configuration(kernel.fun)
    threads = min(size(points, 1), config.threads)
    blocks = cld(size(points, 1), threads)
    CUDA.@sync kernel(pcell, cellpnum, points,  h‚Åª¬π, offset; threads = threads, blocks = blocks)
end

#####################################################################


function kernel_fillcells_naive_2d!(celllist, cellpnum, pcell) 
    index·µ¢ = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index·µ¢ <= length(pcell)
        # no bound check - all should be done before
        p·µ¢, p‚±º = pcell[index·µ¢]
        n = CUDA.@atomic cellpnum[p·µ¢, p‚±º] += 1
        celllist[n + 1, p·µ¢, p‚±º] = index·µ¢
    end
    return nothing
end
"""
    fillcells_naive_2d!(celllist, cellpnum, pcell) 
    
Fill cell list with cell. Naive approach. No bound check. Values in `pcell` list shoid be in range of `cellpnum` and `celllist`.
"""
function fillcells_naive_2d!(celllist, cellpnum, pcell)  
    CLn, CLx, CLy = size(celllist)
    if size(cellpnum) != (CLx, CLy) error("cell list dimension $((CLx, CLy)) not equal cellpnum $(size(cellpnum))...") end
    gpukernel = @cuda launch=false kernel_fillcells_naive_2d!(celllist, cellpnum, pcell) 
    config = launch_configuration(gpukernel.fun)
    threads = min(length(pcell), config.threads)
    blocks = cld(length(pcell), threads)
    CUDA.@sync gpukernel(celllist, cellpnum, pcell; threads = threads, blocks = blocks)
end

#####################################################################
#####################################################################

function kernel_–ºaxpairs_2d!(cellpnum, cnt)
    index·µ¢ = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    index‚±º = (blockIdx().y - Int32(1)) * blockDim().y + threadIdx().y 
    Nx, Ny = size(cellpnum)
    if  index·µ¢ <= Nx && index‚±º <= Ny 
        n = cellpnum[index·µ¢, index‚±º] 
        if n > 0
            m         = 0
            neibcell·µ¢ = index·µ¢ - 1
            neibcell‚±º = index‚±º + 1
            if  0 < neibcell·µ¢ <= Nx && 0 < neibcell‚±º <= Ny 
                m += cellpnum[neibcell·µ¢, neibcell‚±º] 
            end
            neibcell·µ¢ = index·µ¢ 
            neibcell‚±º = index‚±º + 1
            if 0 < neibcell·µ¢ <= Nx && 0 < neibcell‚±º <= Ny 
                m += cellpnum[neibcell·µ¢, neibcell‚±º] 
            end
            neibcell·µ¢ = index·µ¢ + 1
            neibcell‚±º = index‚±º + 1
            if 0 < neibcell·µ¢ <= Nx && 0 < neibcell‚±º <= Ny 
                m += cellpnum[neibcell·µ¢, neibcell‚±º] 
            end
            neibcell·µ¢ = index·µ¢ + 1
            neibcell‚±º = index‚±º 
            if 0 < neibcell·µ¢ <= Nx && 0 < neibcell‚±º <= Ny 
                m += cellpnum[neibcell·µ¢, neibcell‚±º] 
            end
            val  = Int((n * (n - 1)) * 0.5) + m * n
            CUDA.@atomic cnt[1] += val
        end
    end
    return nothing
end
"""
    –ºaxpairs_2d(cellpnum)

Maximum number of pairs.
"""
function –ºaxpairs_2d(cellpnum)
    cnt        = CUDA.zeros(Int, 1)
    Nx, Ny     = size(cellpnum)
    gpukernel  = @cuda launch=false kernel_–ºaxpairs_2d!(cellpnum, cnt)
    config     = launch_configuration(gpukernel.fun)
    maxThreads = config.threads
    Tx         = min(maxThreads, Nx)
    Ty         = min(fld(maxThreads, Tx), Ny)
    Bx, By     = cld(Nx, Tx), cld(Ny, Ty) 
    threads    = (Tx, Ty)
    blocks     = (Bx, By)
    CUDA.@sync gpukernel(cellpnum, cnt; threads = threads, blocks = blocks)
    CUDA.@allowscalar cnt[1]
end
#####################################################################

function kernel_neib_internal_2d!(pairs, cnt, cellpnum, points, celllist, dist) 
    index·µ¢ = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    index‚±º = (blockIdx().y - Int32(1)) * blockDim().y + threadIdx().y
    #index‚Çñ = (blockIdx().z - Int32(1)) * blockDim().z + threadIdx().z
    Nx, Ny = size(cellpnum)
    if index·µ¢ <= Nx && index‚±º <= Ny && cellpnum[index·µ¢, index‚±º] > 1 
        len = cellpnum[index·µ¢, index‚±º]
        for i = 1:len - 1
            indi = celllist[i, index·µ¢, index‚±º]
            for j = i + 1:len
                indj = celllist[j, index·µ¢, index‚±º]
                distance = sqrt((points[indi][1] - points[indj][1])^2 + (points[indi][2] - points[indj][2])^2)
                if distance < dist
                    n = CUDA.@atomic cnt[1] += 1
                    n += 1 
                    if n <= legth(pairs)
                        pairs[n] = tuple(indi, indj, distance)
                    end
                end
            end
        end
    end
    return nothing
end
"""
    neib_internal_2d!(pairs, cnt, cellpnum, points, celllist, dist)

Find all pairs with distance < h in one cell.
"""
function neib_internal_2d!(pairs, cnt, cellpnum, points, celllist, dist)
    CLn, CLx, CLy = size(celllist)
    Nx, Ny = size(cellpnum)
    if (Nx, Ny) != (CLx, CLy) error("cell list dimension ($((CLx, CLy))) not equal cellpnum $(size(cellpnum))...") end
    gpukernel = @cuda launch=false kernel_neib_internal_2d!(pairs, cnt, cellpnum, points, celllist, dist)
    config = launch_configuration(gpukernel.fun)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Ty  = min(fld(maxThreads, Tx), Ny)
    Bx, By = cld(Nx, Tx), cld(Ny, Ty)  # Blocks in grid.
    threads = (Tx, Ty)
    blocks  = Bx, By
    CUDA.@sync gpukernel(pairs, cnt, cellpnum, points, celllist, dist; threads = threads, blocks = blocks)
end
#####################################################################

function kernel_neib_external_2d!(pairs, cnt, cellpnum, points, celllist,  offset, dist)
    index·µ¢ = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    index‚±º = (blockIdx().y - Int32(1)) * blockDim().y + threadIdx().y 
    Nx, Ny = size(cellpnum)
    neibcell·µ¢ = index·µ¢ + offset[1]
    neibcell‚±º = index‚±º + offset[2]
    if 0 < neibcell·µ¢ <= Nx &&  0 < neibcell‚±º <= Ny && index·µ¢ <= Nx && index‚±º <= Ny && cellpnum[index·µ¢, index‚±º] > 0 #&& cellpnum[neibcell·µ¢, neibcell‚±º] > 0
        iinds = view(celllist, 1:cellpnum[index·µ¢, index‚±º], index·µ¢, index‚±º)
        jinds = view(celllist, 1:cellpnum[neibcell·µ¢, neibcell‚±º], neibcell·µ¢, neibcell‚±º)
        for i in iinds
            for j in jinds
                distance = sqrt((points[i][1] - points[j][1])^2 + (points[i][2] - points[j][2])^2)
                if distance < dist
                    n = CUDA.@atomic cnt[1] += 1
                    n +=1
                    if n <= length(pairs)
                        pairs[n] = tuple(i, j, distance)
                    end
                end
            end  
        end
    end
    return nothing
end

"""
    neib_external_2d!(pairs, cnt, cellpnum, points, celllist, offset, dist)

Find all pairs with another cell shifted on offset.
"""
function neib_external_2d!(pairs, cnt, cellpnum, points, celllist, offset, dist)
    CLn, CLx, CLy = size(celllist)
    Nx, Ny = size(cellpnum)
    if (Nx, Ny) != (CLx, CLy) error("cell list dimension $((CLx, CLy)) not equal cellpnum $(size(cellpnum))...") end
    gpukernel = @cuda launch=false kernel_neib_external_2d!(pairs, cnt, cellpnum, points, celllist,  offset, dist)
    config = launch_configuration(gpukernel.fun)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Ty  = min(fld(maxThreads, Tx), Ny)
    Bx, By = cld(Nx, Tx), cld(Ny, Ty)  # Blocks in grid.
    threads = (Tx, Ty)
    blocks  = Bx, By
    CUDA.@sync gpukernel(pairs, cnt, cellpnum, points, celllist, offset, dist; threads = threads, blocks = blocks)
end
#####################################################################
#####################################################################
# SPH
#####################################################################
function kernel_‚àëW_2d!(sumW, pairs, sphkernel, H‚Åª¬π) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(pairs)
        pair  = pairs[index]
        p·µ¢    = pair[1]; p‚±º = pair[2]; d = pair[3]
        if !isnan(d)
            u     = d * H‚Åª¬π
            w     = ùí≤(sphkernel, u, H‚Åª¬π)
            CUDA.@atomic sumW[p·µ¢] += w
            CUDA.@atomic sumW[p‚±º] += w
        end
    end
    return nothing
end
"""

    ‚àëW_2d!(sumW, pairs, sphkernel, H‚Åª¬π) 

Compute ‚àëW for each particles pair in list.
"""
function ‚àëW_2d!(sumW, pairs, sphkernel, H‚Åª¬π) 
    gpukernel = @cuda launch=false kernel_‚àëW_2d!(sumW, pairs, sphkernel, H‚Åª¬π) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(pairs)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(sumW, pairs, sphkernel, H‚Åª¬π; threads = Tx, blocks = Bx)
end
#####################################################################
function kernel_‚àë‚àáW_2d!(sum‚àáW, ‚àáW‚Çô, pairs, points, kernel, H‚Åª¬π) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(pairs)
        pair  = pairs[index]
        p·µ¢    = pair[1]; p‚±º = pair[2]; d = pair[3]
        if !isnan(d)
            x·µ¢    = points[p·µ¢]
            x‚±º    = points[p‚±º]
            u     = d * H‚Åª¬π
            dwk_r = dùí≤(kernel, u, H‚Åª¬π) / d
            ‚àáw    = ((x·µ¢[1] - x‚±º[1]) * dwk_r, (x·µ¢[2] - x‚±º[2]) * dwk_r)
            CUDA.@atomic sum‚àáW[p·µ¢, 1] += ‚àáw[1]
            CUDA.@atomic sum‚àáW[p·µ¢, 2] += ‚àáw[2]
            CUDA.@atomic sum‚àáW[p‚±º, 1] -= ‚àáw[1]
            CUDA.@atomic sum‚àáW[p‚±º, 2] -= ‚àáw[2]
            ‚àáW‚Çô[index] = ‚àáw
        end
    end
    return nothing
end
"""
    
    ‚àë‚àáW_2d!(sum‚àáW, ‚àáW‚Çô, pairs, points, kernel, H‚Åª¬π) 

Compute gradients.

"""
function ‚àë‚àáW_2d!(sum‚àáW, ‚àáW‚Çô, pairs, points, kernel, H‚Åª¬π) 
    gpukernel = @cuda launch=false kernel_‚àë‚àáW_2d!(sum‚àáW, ‚àáW‚Çô, pairs, points, kernel, H‚Åª¬π) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(pairs)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(sum‚àáW, ‚àáW‚Çô, pairs, points, kernel, H‚Åª¬π; threads = Tx, blocks = Bx)
end


#####################################################################

function kernel_‚àÇœÅ‚àÇtDDT!(‚àë‚àÇœÅ‚àÇt,  ‚àáW‚Çô, pairs, points, h, m‚ÇÄ, Œ¥·µ©, c‚ÇÄ, Œ≥, g, œÅ‚ÇÄ, œÅ, v, MotionLimiter) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(pairs)
        pair  = pairs[index]
        p·µ¢    = pair[1]; p‚±º = pair[2]; d = pair[3]
        if !isnan(d)
            x·µ¢    = points[p·µ¢]
            x‚±º    = points[p‚±º]
            Œîx    = (x·µ¢[1] - x‚±º[1], x·µ¢[2] - x‚±º[2])
            r¬≤    = Œîx[1]^2 + Œîx[2]^2 
            # for timestep Œît¬Ω d != actual range
            # one way - not calculate values out of 2h
            # if r¬≤ > (2h)^2 return nothing end

            # move it outside kernel
            Œ≥‚Åª¬π  = 1/Œ≥
            Œ∑¬≤   = (0.1*h)*(0.1*h)
            Cb    = (c‚ÇÄ * c‚ÇÄ * œÅ‚ÇÄ) * Œ≥‚Åª¬π
            DDTgz = œÅ‚ÇÄ * g / Cb
            DDTkh = 2 * h * Œ¥·µ©
            #=
            Cb = (c‚ÇÄ * c‚ÇÄ * œÅ‚ÇÄ) * Œ≥‚Åª¬π
            P·¥¥ =  œÅ‚ÇÄ * g * z
            ·µ∏·µÄ·¥¥
            =#
            œÅ·µ¢    = œÅ[p·µ¢]
            œÅ‚±º    = œÅ[p‚±º]

            Œîv    = (v[p·µ¢][1] - v[p‚±º][1], v[p·µ¢][2] - v[p‚±º][2])

            ‚àáW   = ‚àáW‚Çô[index]
            #=
            z  = Œîx[2]
            Cb = (c‚ÇÄ * c‚ÇÄ * œÅ‚ÇÄ) * Œ≥‚Åª¬π
            P·¥¥ =  œÅ‚ÇÄ * g * z
            œÅ·¥¥ =  œÅ‚ÇÄ * (((P·¥¥ + 1)/Cb)^Œ≥‚Åª¬π - 1)
            œà  = 2 * (œÅ·µ¢ - œÅ‚±º) * Œîx / r¬≤
            =#
            dot3  = -(Œîx[1] * ‚àáW[1] + Œîx[2] * ‚àáW[2]) #  - Œîx ‚ãÖ ‚àáW

            # as actual range at timestep Œît¬Ω  may be greateg  - some problems can be here
            if 1 + DDTgz * Œîx[2] < 0 || 1 - DDTgz * Œîx[2] < 0 return nothing end
            
            drhopvp = œÅ‚ÇÄ * (1 + DDTgz * Œîx[2])^Œ≥‚Åª¬π - œÅ‚ÇÄ ## << CHECK
            visc_densi = DDTkh * c‚ÇÄ * (œÅ‚±º - œÅ·µ¢ - drhopvp) / (r¬≤ + Œ∑¬≤)
            delta_i    = visc_densi * dot3 * m‚ÇÄ / œÅ‚±º

            drhopvn = œÅ‚ÇÄ * (1 - DDTgz * Œîx[2])^Œ≥‚Åª¬π - œÅ‚ÇÄ
            visc_densi = DDTkh * c‚ÇÄ * (œÅ·µ¢ - œÅ‚±º - drhopvn) / (r¬≤ + Œ∑¬≤)
            delta_j    = visc_densi * dot3 * m‚ÇÄ / œÅ·µ¢

            m‚ÇÄdot     = m‚ÇÄ * (Œîv[1] * ‚àáW[1] + Œîv[2] * ‚àáW[2])  #  Œîv ‚ãÖ ‚àáW
            #=
            if isnan(delta_j) || isnan(m‚ÇÄdot)  || isnan(œÅ·µ¢) || isnan(œÅ‚±º) 
                @cuprintln "kernel_DDT 1 isnan dx1 = $(Œîx[1]) , dx2 = $(Œîx[2]) rhoi = $œÅ·µ¢ , dot3 = $dot3 , visc_densi = $visc_densi drhopvn = $drhopvn $(‚àáW[1]) $(Œîv[1])"
                error() 
            end
            if isinf(delta_j) || isinf(m‚ÇÄdot)  || isinf(delta_i) 
                @cuprintln "kernel_DDT 2 inf: dx1 = $(Œîx[1]) , dx2 = $(Œîx[2]) rhoi = $œÅ·µ¢ , rhoj = $œÅ‚±º , dot3 = $dot3 ,  delta_i = $delta_i , delta_j = $delta_j , drhopvn = $drhopvn , visc_densi = $visc_densi , $(‚àáW[1]) , $(Œîv[1])"
                error() 
            end
            =#
            #mlfac = MotionLimiter[p·µ¢] * MotionLimiter[p‚±º]
            ‚àë‚àÇœÅ‚àÇti = m‚ÇÄdot + delta_i *  MotionLimiter[p·µ¢]
            ‚àë‚àÇœÅ‚àÇtj = m‚ÇÄdot + delta_j *  MotionLimiter[p‚±º]
            ‚àë‚àÇœÅ‚àÇtval1 = CUDA.@atomic ‚àë‚àÇœÅ‚àÇt[p·µ¢] += ‚àë‚àÇœÅ‚àÇti
            ‚àë‚àÇœÅ‚àÇtval2 = CUDA.@atomic ‚àë‚àÇœÅ‚àÇt[p‚±º] += ‚àë‚àÇœÅ‚àÇtj
            #=
            if isnan(œÅ·µ¢) || iszero(œÅ·µ¢) || œÅ·µ¢ < 0.001 || isnan(œÅ‚±º) || iszero(œÅ‚±º) || œÅ‚±º < 0.001
                @cuprintln "kernel DDT rho index =  $index , rhoi = $œÅ·µ¢ , rhoi = $œÅ‚±º, dx = $Œîx , r =  $r¬≤, val1 = $‚àë‚àÇœÅ‚àÇtval1 ,   val2 = $‚àë‚àÇœÅ‚àÇtval2 , pair = $pair"
                error() 
            end

            if isnan(‚àë‚àÇœÅ‚àÇtval1) || isnan(‚àë‚àÇœÅ‚àÇtval2)
                @cuprintln "kernel DDT 3 val1 = $(‚àë‚àÇœÅ‚àÇtval1), val2 = $(‚àë‚àÇœÅ‚àÇtval2), dx1 = $(Œîx[1]) , dx2 = $(Œîx[2]) rhoi = $œÅ·µ¢ , dot3 = $dot3 , visc_densi = $visc_densi drhopvn = $drhopvn $(‚àáW[1]) $(Œîv[1])"
                error() 
            end
            =#
        end
    end
    return nothing
end
"""
    
    ‚àÇœÅ‚àÇtDDT!(‚àë‚àÇœÅ‚àÇt,  ‚àáW‚Çô, pairs, points, h, m‚ÇÄ, Œ¥·µ©, c‚ÇÄ, Œ≥, g, œÅ‚ÇÄ, œÅ, v, MotionLimiter) 

Compute ‚àÇœÅ‚àÇt - density derivative includind density diffusion.
"""
function ‚àÇœÅ‚àÇtDDT!(‚àë‚àÇœÅ‚àÇt,  ‚àáW‚Çô, pairs, points, h, m‚ÇÄ, Œ¥·µ©, c‚ÇÄ, Œ≥, g, œÅ‚ÇÄ, œÅ, v, MotionLimiter) 
    if length(pairs) != length(‚àáW‚Çô) error("Length shoul be equal") end

    gpukernel = @cuda launch=false kernel_‚àÇœÅ‚àÇtDDT!(‚àë‚àÇœÅ‚àÇt,  ‚àáW‚Çô, pairs, points, h, m‚ÇÄ, Œ¥·µ©, c‚ÇÄ, Œ≥, g, œÅ‚ÇÄ, œÅ, v, MotionLimiter) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(pairs)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(‚àë‚àÇœÅ‚àÇt,  ‚àáW‚Çô, pairs, points, h, m‚ÇÄ, Œ¥·µ©, c‚ÇÄ, Œ≥, g, œÅ‚ÇÄ, œÅ, v, MotionLimiter; threads = Tx, blocks = Bx)
end
#####################################################################
function kernel_‚àÇŒ†‚àÇt!(‚àë‚àÇŒ†‚àÇt, ‚àáW‚Çô, pairs, points, h, œÅ, Œ±, v, c‚ÇÄ, m‚ÇÄ) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x

    if index <= length(pairs)
        pair  = pairs[index]
        p·µ¢    = pair[1]; p‚±º = pair[2]; d = pair[3]
        if !isnan(d)

            x·µ¢    = points[p·µ¢]
            x‚±º    = points[p‚±º]
            Œîx    = (x·µ¢[1] - x‚±º[1], x·µ¢[2] - x‚±º[2])
            r¬≤    = Œîx[1]^2 + Œîx[2]^2 
            # for timestep Œît¬Ω d != actual range
            # one way - not calculate values out of 2h
            # if r¬≤ > (2h)^2 return nothing end
            Œ∑¬≤    = (0.1 * h) * (0.1 * h)
            œÅ·µ¢    = œÅ[p·µ¢]
            œÅ‚±º    = œÅ[p‚±º]
            #=
            if isnan(œÅ·µ¢) || iszero(œÅ·µ¢) || œÅ·µ¢ < 0.001 || isnan(œÅ‚±º) || iszero(œÅ‚±º) || œÅ‚±º < 0.001
                @cuprintln "kernel Œ† index =  $index , rhoi = $œÅ·µ¢ , rhoi = $œÅ‚±º, dx = $Œîx , r =  $r¬≤, pair = $pair"
                error() 
            end
            =#
            Œîv    = (v[p·µ¢][1] - v[p‚±º][1], v[p·µ¢][2] - v[p‚±º][2])

            œÅ‚Çò    = (œÅ·µ¢ + œÅ‚±º) * 0.5
            
            ‚àáW    = ‚àáW‚Çô[index]

            cond   = Œîv[1] * Œîx[1] +  Œîv[2] * Œîx[2] 

            if cond < 0
            
                ŒîŒº   = h * cond / (r¬≤ + Œ∑¬≤)

                ŒîŒ†   =  (-Œ± * c‚ÇÄ * ŒîŒº) / œÅ‚Çò

                ŒîŒ†m‚ÇÄ‚àáW = (-ŒîŒ† * m‚ÇÄ * ‚àáW[1], -ŒîŒ† * m‚ÇÄ * ‚àáW[2])
                #=
                if isnan(ŒîŒ†m‚ÇÄ‚àáW[1])
                    @cuprintln "kernel Œ†: Œ† = $ŒîŒ† ,  W = $(‚àáW[1])"
                    error() 
                end
                =#
                CUDA.@atomic ‚àë‚àÇŒ†‚àÇt[p·µ¢, 1] += ŒîŒ†m‚ÇÄ‚àáW[1]
                CUDA.@atomic ‚àë‚àÇŒ†‚àÇt[p·µ¢, 2] += ŒîŒ†m‚ÇÄ‚àáW[2]
                CUDA.@atomic ‚àë‚àÇŒ†‚àÇt[p‚±º, 1] -= ŒîŒ†m‚ÇÄ‚àáW[1]
                CUDA.@atomic ‚àë‚àÇŒ†‚àÇt[p‚±º, 2] -= ŒîŒ†m‚ÇÄ‚àáW[2]
            end
        end
    end
    return nothing
end
"""
    
    ‚àÇŒ†‚àÇt!(‚àë‚àÇŒ†‚àÇt, ‚àáW‚Çô, pairs, points, h, œÅ, Œ±, v, c‚ÇÄ, m‚ÇÄ)


Compute ‚àÇŒ†‚àÇt - artificial viscosity.
"""
function ‚àÇŒ†‚àÇt!(‚àë‚àÇŒ†‚àÇt, ‚àáW‚Çô, pairs, points, h, œÅ, Œ±, v, c‚ÇÄ, m‚ÇÄ) 
    gpukernel = @cuda launch=false kernel_‚àÇŒ†‚àÇt!(‚àë‚àÇŒ†‚àÇt, ‚àáW‚Çô, pairs, points, h, œÅ, Œ±, v, c‚ÇÄ, m‚ÇÄ) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(pairs)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(‚àë‚àÇŒ†‚àÇt, ‚àáW‚Çô, pairs, points, h, œÅ, Œ±, v, c‚ÇÄ, m‚ÇÄ; threads = Tx, blocks = Bx)
end
#####################################################################


"""
    pressure(œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ)

Equation of State in Weakly-Compressible SPH
"""
function pressure(œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ)
    return ((c‚ÇÄ ^ 2 * œÅ‚ÇÄ) / Œ≥) * ((œÅ / œÅ‚ÇÄ) ^ Œ≥ - 1)
end
#####################################################################
function kernel_‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt,  ‚àáW‚Çô,  pairs, m, œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(pairs)
        pair  = pairs[index]
        p·µ¢    = pair[1]; p‚±º = pair[2]; d = pair[3]
        if !isnan(d)

            œÅ·µ¢    = œÅ[p·µ¢]
            œÅ‚±º    = œÅ[p‚±º]
            #=
            if isnan(œÅ·µ¢) || iszero(œÅ·µ¢) || œÅ·µ¢ < 0.001 || isnan(œÅ‚±º) || iszero(œÅ‚±º) || œÅ‚±º < 0.001
                @cuprintln "kernel update rho: index =  $index , rhoi = $œÅ·µ¢ , rhoi = $œÅ‚±º, dpdt =  $(‚àë‚àÇv‚àÇt[index]), pair = $pair"
                error() 
            end
            =#
            P·µ¢    = pressure(œÅ·µ¢, c‚ÇÄ, Œ≥, œÅ‚ÇÄ)
            P‚±º    = pressure(œÅ‚±º, c‚ÇÄ, Œ≥, œÅ‚ÇÄ)
            ‚àáW    = ‚àáW‚Çô[index]

            Pfac  = (P·µ¢ + P‚±º) / (œÅ·µ¢ * œÅ‚±º)

            ‚àÇv‚àÇt  = (- m * Pfac * ‚àáW[1], - m * Pfac * ‚àáW[2])
            
            if isnan(‚àÇv‚àÇt[1])
                @cuprintln "kernel dvdt: rhoi = $œÅ·µ¢ , Pi =  $P·µ¢ , m = $m , Pfac = $Pfac , W1 = $(‚àáW[1])"
                error() 
            end
            
            CUDA.@atomic ‚àë‚àÇv‚àÇt[p·µ¢, 1] +=  ‚àÇv‚àÇt[1]
            CUDA.@atomic ‚àë‚àÇv‚àÇt[p·µ¢, 2] +=  ‚àÇv‚àÇt[2]
            CUDA.@atomic ‚àë‚àÇv‚àÇt[p‚±º, 1] -=  ‚àÇv‚àÇt[1]
            CUDA.@atomic ‚àë‚àÇv‚àÇt[p‚±º, 2] -=  ‚àÇv‚àÇt[2]
        end
    end
    return nothing
end
"""
    
    ‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt,  ‚àáW‚Çô, pairs, m, œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ) 

The momentum equation (without dissipation).
"""
function ‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt,  ‚àáW‚Çô, pairs, m, œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ) 
    gpukernel = @cuda launch=false kernel_‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt,  ‚àáW‚Çô, pairs, m, œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(pairs)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(‚àë‚àÇv‚àÇt,  ‚àáW‚Çô, pairs, m, œÅ, c‚ÇÄ, Œ≥, œÅ‚ÇÄ; threads = Tx, blocks = Bx)
end

#####################################################################

function kernel_completed_‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt, ‚àë‚àÇŒ†‚àÇt,  gvec, gfac) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= size(‚àë‚àÇv‚àÇt, 1)
        ‚àë‚àÇv‚àÇt[index, 1] +=  ‚àë‚àÇŒ†‚àÇt[index, 1] - gvec[1] #* gfac[index]
        ‚àë‚àÇv‚àÇt[index, 2] +=  ‚àë‚àÇŒ†‚àÇt[index, 2] - gvec[2] #* gfac[index]
    end
    return nothing
end
"""
    
    completed_‚àÇv·µ¢‚àÇt!(‚àë‚àÇv‚àÇt, ‚àë‚àÇŒ†‚àÇt,  gvec, gfac)  

Add gravity and artificial viscosity to the momentum equation.
"""
function completed_‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt, ‚àë‚àÇŒ†‚àÇt,  gvec, gfac) 
    if size(‚àë‚àÇv‚àÇt, 1) != size(‚àë‚àÇŒ†‚àÇt, 1) error("Wrong length") end
    gpukernel = @cuda launch=false kernel_completed_‚àÇv‚àÇt!(‚àë‚àÇv‚àÇt, ‚àë‚àÇŒ†‚àÇt,  gvec, gfac) 
    config = launch_configuration(gpukernel.fun)
    Nx = size(‚àë‚àÇv‚àÇt, 1)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(‚àë‚àÇv‚àÇt, ‚àë‚àÇŒ†‚àÇt,  gvec, gfac; threads = Tx, blocks = Bx)
end
#####################################################################

function kernel_update_œÅ!(œÅ, ‚àë‚àÇœÅ‚àÇt, Œît, œÅ‚ÇÄ, isboundary) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(œÅ)
        œÅval = œÅ[index] + ‚àë‚àÇœÅ‚àÇt[index] * Œît
        if œÅval < œÅ‚ÇÄ && isboundary[index] œÅval = œÅ‚ÇÄ end
        #=
        if isnan(œÅval) || iszero(œÅval) || œÅval < 0.001
            @cuprintln "kernel update rho: index =  $index , rhoval = $œÅval  ,rhoi = $(œÅ[index]) , dpdt =  $(‚àë‚àÇœÅ‚àÇt[index]), dt = $Œît , isboundary = $(isboundary[index])"
            error() 
        end
        =#
        œÅ[index] = œÅval
    end
    return nothing
end
"""
    update_œÅ!(œÅ, ‚àë‚àÇœÅ‚àÇt, Œît, œÅ‚ÇÄ, isboundary) 


"""
function update_œÅ!(œÅ, ‚àë‚àÇœÅ‚àÇt, Œît, œÅ‚ÇÄ, isboundary) 
    if length(œÅ) != size(‚àë‚àÇœÅ‚àÇt, 1) error("Wrong length") end
    gpukernel = @cuda launch=false kernel_update_œÅ!(œÅ, ‚àë‚àÇœÅ‚àÇt, Œît, œÅ‚ÇÄ, isboundary) 
    config = launch_configuration(gpukernel.fun)
    Nx = size(‚àë‚àÇœÅ‚àÇt, 1)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(œÅ, ‚àë‚àÇœÅ‚àÇt, Œît, œÅ‚ÇÄ, isboundary; threads = Tx, blocks = Bx)
end
#####################################################################
function kernel_update_vp‚àÇv‚àÇtŒît!(v, ‚àë‚àÇv‚àÇt, Œît, ml) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= size(‚àë‚àÇv‚àÇt, 1)
        val = v[index]
        v[index] = (val[1] + ‚àë‚àÇv‚àÇt[index, 1] * Œît * ml[index], val[2] + ‚àë‚àÇv‚àÇt[index, 2] * Œît * ml[index])
        #=
        if isnan(v[index][1] )
            @cuprintln "kernel update v by dvdvt: val = $(val[1]) , dvdt =  $(‚àë‚àÇv‚àÇt[index, 1] ), dt =  $Œît"
            error() 
        end
        =#
    end
    return nothing
end
"""
    update_vp‚àÇv‚àÇtŒît!(v, ‚àë‚àÇv‚àÇt, Œît, ml) 


"""
function update_vp‚àÇv‚àÇtŒît!(v, ‚àë‚àÇv‚àÇt, Œît, ml) 
    if !(length(v) == size(‚àë‚àÇv‚àÇt, 1) == length(ml)) error("Wrong length") end
    gpukernel = @cuda launch = false kernel_update_vp‚àÇv‚àÇtŒît!(v, ‚àë‚àÇv‚àÇt, Œît, ml) 
    config = launch_configuration(gpukernel.fun)
    Nx = size(‚àë‚àÇv‚àÇt, 1)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx  = cld(Nx, Tx)
    CUDA.@sync gpukernel(v, ‚àë‚àÇv‚àÇt, Œît, ml; threads = Tx, blocks = Bx)
end

#####################################################################
function kernel_update_xpvŒît!(x, v, Œît, ml) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(x)
        xval = x[index]
        vval = v[index]
        x[index] = (xval[1] + vval[1] * Œît, xval[2] + vval[2] * Œît)
        #=
        if isnan(x[index][1] )
            @cuprintln "kernel dxdt: xval =  $(xval[1]) , vval =  $(vval[1]),  dt = $Œît"
            error() 
        end
        =#
    end
    return nothing
end
"""
    update_xpvŒît!(x, v, Œît, ml) 


"""
function update_xpvŒît!(x, v, Œît, ml) 
    if length(x) != length(v) error("Wrong length") end
    gpukernel = @cuda launch=false kernel_update_xpvŒît!(x, v, Œît, ml) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(x)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(x, v, Œît, ml; threads = Tx, blocks = Bx)
end
#####################################################################

function kernel_update_all!(œÅ, œÅŒît¬Ω, v, vŒît¬Ω, x, xŒît¬Ω, ‚àë‚àÇœÅ‚àÇt, ‚àë‚àÇv‚àÇt,  Œît, cŒîx, œÅ‚ÇÄ, isboundary, ml) # << rename
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(x)

        epsi       = -(‚àë‚àÇœÅ‚àÇt[index] / œÅŒît¬Ω[index]) * Œît
        œÅval       = œÅ[index]  * (2 - epsi)/(2 + epsi)
        if œÅval < œÅ‚ÇÄ && isboundary[index] œÅval = œÅ‚ÇÄ end

        #=
        if isnan(œÅval) || iszero(œÅval) || œÅval < 0.01
            @cuprintln "kernel update all rho: rhova = $œÅval , epsi = $epsi , drhodt = $(‚àë‚àÇœÅ‚àÇt[index]) , rhot12 = $(œÅŒît¬Ω[index]) $Œît"
            error() 
        end
        =#
        œÅŒît¬Ω[index] = œÅval
        œÅ[index]    = œÅval
        #=
        if œÅŒît¬Ω[index] < 0.01
            @cuprintln "kernel update all rho 1: rhova = $œÅval , epsi = $epsi , drhodt = $(‚àë‚àÇœÅ‚àÇt[index]) , rhot12 = $(œÅŒît¬Ω[index]) $Œît"
            error() 
        end
        if œÅ[index]  < 0.01
            @cuprintln "kernel update all rho 1: rhova = $œÅval , epsi = $epsi , drhodt = $(‚àë‚àÇœÅ‚àÇt[index]) , rhot12 = $(œÅŒît¬Ω[index]) $Œît"
            error() 
        end
        =#
        vval = v[index]
        nval = (vval[1] + ‚àë‚àÇv‚àÇt[index, 1] * Œît * ml[index], vval[2] + ‚àë‚àÇv‚àÇt[index, 2] * Œît * ml[index])
        vŒît¬Ω[index] = nval
        v[index] = nval

        xval = x[index]
        ŒîxÀ£, Œîx ∏  = (vval[1] + nval[1]) * 0.5  * Œît, (vval[2] + nval[2]) * 0.5  * Œît
        cŒîx[1][index]  += ŒîxÀ£
        cŒîx[2][index]  += Œîx ∏
        xval = (xval[1] + ŒîxÀ£, xval[2] + Œîx ∏)
        xŒît¬Ω[index] = xval
        x[index] = xval
    end
    return nothing
end
"""
    
    update_all!(œÅ, œÅŒît¬Ω, v, vŒît¬Ω, x, xŒît¬Ω, ‚àë‚àÇœÅ‚àÇt, ‚àë‚àÇv‚àÇt,  Œît, œÅ‚ÇÄ, isboundary, ml) 


"""
function update_all!(œÅ, œÅŒît¬Ω, v, vŒît¬Ω, x, xŒît¬Ω, ‚àë‚àÇœÅ‚àÇt, ‚àë‚àÇv‚àÇt,  Œît, cŒîx, œÅ‚ÇÄ, isboundary, ml) 
    if length(x) != length(v) error("Wrong length") end
    gpukernel = @cuda launch=false kernel_update_all!(œÅ, œÅŒît¬Ω, v, vŒît¬Ω, x, xŒît¬Ω, ‚àë‚àÇœÅ‚àÇt, ‚àë‚àÇv‚àÇt,  Œît, cŒîx, œÅ‚ÇÄ, isboundary, ml) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(x)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(œÅ, œÅŒît¬Ω, v, vŒît¬Ω, x, xŒît¬Ω, ‚àë‚àÇœÅ‚àÇt, ‚àë‚àÇv‚àÇt,  Œît, cŒîx, œÅ‚ÇÄ, isboundary, ml; threads = Tx, blocks = Bx)
end

#####################################################################

function kernel_Œît_stepping!(buf, v, points, h, Œ∑¬≤) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(buf)
        vp = v[index]
        pp = points[index]
        buf[index] = abs(h * (vp[1] * pp[1] + vp[2] * pp[2]) / (pp[1]^2 + pp[2]^2 + Œ∑¬≤))
    end
    return nothing
end
function kernel_Œît_stepping_norm!(buf, a) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(buf)
        buf[index] =  sqrt(a[index, 1]^2 + a[index, 2]^2) 
    end
    return nothing
end
"""    
    Œît_stepping(buf, a, v, points, c‚ÇÄ, h, CFL, timelims) 

"""
function Œît_stepping(buf, a, v, points, c‚ÇÄ, h, CFL, timelims) 

    # some problems can be here if we have cells with big acceleration 
    # may be include only particles that only in simulation range

    Œ∑¬≤  = (0.01)h * (0.01)h

    gpukernel = @cuda launch=false kernel_Œît_stepping_norm!(buf, a) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(buf)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(buf, a; threads = Tx, blocks = Bx)

    dt1 = sqrt(h / 3maximum(buf)) # mul 1/3

    gpukernel = @cuda launch=false kernel_Œît_stepping!(buf, v, points, h, Œ∑¬≤) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(buf)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(buf, v, points, h, Œ∑¬≤; threads = Tx, blocks = Bx)
   
    visc  = maximum(buf)
  
    dt2   = h / (c‚ÇÄ + visc)
    dt    = CFL * min(dt1, dt2)
    dt    = min(max(dt, timelims[1]), timelims[2])
    return dt
end

#####################################################################
#####################################################################
function kernel_‚àÇv‚àÇtpF!(‚àë‚àÇv‚àÇt, pairs, points, s, h, m‚ÇÄ, isboundary) 
    index = (blockIdx().x - Int32(1)) * blockDim().x + threadIdx().x
    if index <= length(pairs)
        pair  = pairs[index]
        p·µ¢    = pair[1]; p‚±º = pair[2]; d = pair[3]
        if !isnan(d)
            if !isboundary[p·µ¢] && !isboundary[p‚±º]
                x·µ¢    = points[p·µ¢]
                x‚±º    = points[p‚±º]
                Œîx    = (x·µ¢[1] - x‚±º[1], x·µ¢[2] - x‚±º[2])
                r     = sqrt(Œîx[1]^2 + Œîx[2]^2) 
                if r < 2h
                    scos = s * cos(1.5œÄ * r / 2h)/ (r + (0.1*h))
                    CUDA.@atomic ‚àë‚àÇv‚àÇt[p·µ¢, 1] +=  scos * Œîx[1] / m‚ÇÄ
                    CUDA.@atomic ‚àë‚àÇv‚àÇt[p·µ¢, 2] +=  scos * Œîx[2] / m‚ÇÄ
                    CUDA.@atomic ‚àë‚àÇv‚àÇt[p‚±º, 1] -=  scos * Œîx[1] / m‚ÇÄ
                    CUDA.@atomic ‚àë‚àÇv‚àÇt[p‚±º, 2] -=  scos * Œîx[2] / m‚ÇÄ
                end
            end
        end
    end
    return nothing
end
"""
    
    ‚àÇv‚àÇtpF!(‚àë‚àÇv‚àÇt, pairs, points, s, H) 

Add surface tension to ‚àë‚àÇv‚àÇt. Modified.

A. Tartakovsky and P. Meakin, Phys. Rev. E 72 (2005)
"""
function ‚àÇv‚àÇtpF!(‚àë‚àÇv‚àÇt, pairs, points, s, h, m‚ÇÄ, isboundary) 
    gpukernel = @cuda launch=false kernel_‚àÇv‚àÇtpF!(‚àë‚àÇv‚àÇt, pairs, points, s, h, m‚ÇÄ, isboundary) 
    config = launch_configuration(gpukernel.fun)
    Nx = length(pairs)
    maxThreads = config.threads
    Tx  = min(maxThreads, Nx)
    Bx = cld(Nx, Tx)
    CUDA.@sync gpukernel(‚àë‚àÇv‚àÇt, pairs, points, s, h, m‚ÇÄ, isboundary; threads = Tx, blocks = Bx)
end