var documenterSearchIndex = {"docs":
[{"location":"api/#Autodocs-API","page":"API","title":"Autodocs API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GPUCellListSPH]","category":"page"},{"location":"api/#GPUCellListSPH.GPUCellList-Union{Tuple{T}, Tuple{D}, Tuple{Tuple{Vararg{AbstractArray{T}, D}}, Any, Any}} where {D, T<:AbstractFloat}","page":"API","title":"GPUCellListSPH.GPUCellList","text":"GPUCellList(points, cellsize, dist; mppcell = 0, mpairs = 0)\n\nMake cell list structure.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.SPHProblem","page":"API","title":"GPUCellListSPH.SPHProblem","text":"SPHProblem(system::GPUCellList, h::Float64, H::Float64, sphkernel::AbstractSPHKernel, ρ, v, ptype, ρ₀::Float64, m₀::Float64, Δt::Float64, α::Float64, g::Float64, c₀::Float64, γ, δᵩ::Float64, CFL::Float64; s::Float64 = 0.0)\n\nSPH simulation data structure.\n\nsystem::GPUCellList{T} - system of particles (position and cells);\n\ndx - dx;\n\nh - smoothing length;\n\nH- kernel support radius (2h);\n\nsphkernel::AbstractSPHKernel - SPH kernel from SPHKernels.jl;\n\nρ - rho (vector);\n\nv - velocity (vector);\n\nptype - particle type: 1 - fluid 1; 0 - boundary; -1 boundary hard layer;\n\nρ₀ - Reference density;\n\nm₀ - nitial mass;\n\nΔt - default Δt;\n\nα - Artificial viscosity alpha constant;\n\ng - gravity constant;\n\nc₀ - speed of sound;\n\nγ - Gamma, 7 for water (used in the pressure equation of state);\n\nδᵩ- Coefficient for density diffusion, typically 0.1;\n\nCFL - CFL number for the simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#GPUCellListSPH.cellmap!-NTuple{5, Any}","page":"API","title":"GPUCellListSPH.cellmap!","text":"cellmap!(pcell, cellpnum, points,  h, offset)\n\nMap each point to cell and count number of points in each cell.\n\nFor each coordinates cell number calculated:\n\ncsᵢ = size(cellpnum, 1) \np₁  =  (x₁ - offset₁) * h₁⁻¹\npᵢ₁ = ceil(min(max(p₁, 1), csᵢ))\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.cspmcorr!-Union{Tuple{T}, Tuple{Any, Any, CUDA.CuArray{T}, Any, Any, Any}} where T","page":"API","title":"GPUCellListSPH.cspmcorr!","text":"cspmcorr!(∑ρcspm1, ∑ρcspm2, ρ, m₀, pairs, points, sphkernel, H⁻¹)\n\nCorrected Smoothed Particle Method (CSPM) Density Renormalisation.\n\n\nrho_i^norm = fracsum m_j Wsum fracm_jrho_j W\n\nChen JK, Beraun JE, Carney TC (1999) A corrective smoothed particle method for boundary value problems in heat conduction. Int. J. Num. Meth. Engng. https://doi.org/10.1002/(SICI)1097-0207(19990920)46:2<231::AID-NME672>3.0.CO;2-K\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.dpcreg!-Union{Tuple{T}, Tuple{Any, Any, CUDA.CuArray{T}, CUDA.CuArray{T}, Vararg{Any, 10}}} where T","page":"API","title":"GPUCellListSPH.dpcreg!","text":"dpcreg!(∑Δvdpc, v, ρ, P, pairs, points, sphkernel, l₀, Pmin, Pmax, Δt, λ, dpckernlim)\n\nDynamic Particle Collision (DPC) correction. Replace all values and update ∑Δvdpc.\n\ndelta textbfv_i^DPC = sum k_ijfracm_jm_i + m_jv_ij^coll + fracDelta  trho_isum phi_ij frac2V_jV_i + V_jfracp_ij^br_ij^2 + eta^2textbfr_ij\n\n\n\n(v_ij^coll  quad phi_ij) = begincases (fractextbfv_ijcdot textbfr_ijr_ij^2 + eta^2textbfr_ji quad 0)  textbfv_ijcdot textbfr_ij  0  (0 quad 1)   otherwise endcases\n\n\np_ij^b = tildep_ij chi_ij \n\n\n\ntildep_ij = max(min(lambda p_i + p_j lambda p_max) p_min)\n\n\n\nchi_ij  = sqrtfracomega(r_ij l_0)omega(l_02 l_0)\n\n\n\nk_ij =  begincases chi_ij  05 le r_ijl_0  1  1  r_ijl_0  05 endcases\n\n\nMojtaba Jandaghian, Herman Musumari Siaben, Ahmad Shakibaeinia, Stability and accuracy of the weakly compressible SPH with particle regularization techniques https://arxiv.org/pdf/2110.10076.pdf\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.fbmolforce!-NTuple{6, Any}","page":"API","title":"GPUCellListSPH.fbmolforce!","text":"fbmolforce!(∑∂v∂t, pairs, points, d, r₀, ptype)\n\nThe repulsive force exerted by the virtual particle on the fluid particle.\n\nF = D * fracleft( (fracr_0textbfr_ij)^n_1 - (fracr_0textbfr_ij)^n_2right)r_ij^2\n\nRapaport, 2004\n\nn₁ = 12\n\nn₂ = 4\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.fillcells_naive!-Tuple{Any, Any, Any}","page":"API","title":"GPUCellListSPH.fillcells_naive!","text":"fillcells_naive!(celllist, cellpnum, pcell)\n\nFill cell list with cell. Naive approach. No bound check. Values in pcell list shoid be in range of cellpnum and celllist.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.makedf-Tuple{SPHProblem}","page":"API","title":"GPUCellListSPH.makedf","text":"makedf(prob::SPHProblem; vtkvars = [\"Density\", \"Acceleration\", \"Velocity\"])\n\nMake DataFrame from SPH Problem.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.neib_external!-Union{Tuple{T}, Tuple{Any, Any, Any, Tuple{CUDA.CuArray{T}, CUDA.CuArray{T}}, Any, Any, Any}} where T","page":"API","title":"GPUCellListSPH.neib_external!","text":"neib_external!(pairs, cnt, cellpnum, points, celllist, offset, dist)\n\nFind all pairs with another cell shifted on offset.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.neib_internal!-Union{Tuple{T}, Tuple{Any, Any, Any, Tuple{CUDA.CuArray{T}, CUDA.CuArray{T}}, Any, Any}} where T","page":"API","title":"GPUCellListSPH.neib_internal!","text":"neib_internal!(pairs, cnt, cellpnum, points, celllist, dist)\n\nFind all pairs with distance < h in one cell.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.neib_search!-Union{Tuple{T}, Tuple{Any, Any, Any, Tuple{CUDA.CuArray{T}, CUDA.CuArray{T}}, Any, Any}} where T","page":"API","title":"GPUCellListSPH.neib_search!","text":"neib_search!(pairs, cnt, cellpnum, points, celllist, dist)\n\nSearch all pairs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.neighborlist-Tuple{GPUCellList}","page":"API","title":"GPUCellListSPH.neighborlist","text":"neighborlist(c::GPUCellList)\n\nList of pairs with distance.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.neighborlistview-Tuple{GPUCellList}","page":"API","title":"GPUCellListSPH.neighborlistview","text":"neighborlistview(c::GPUCellList)\n\nList of pairs with distance.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.partialupdate!","page":"API","title":"GPUCellListSPH.partialupdate!","text":"partialupdate!(c::GPUCellList, fillzero::Bool = true)\n\nUpdate only distance \n\n\n\n\n\n","category":"function"},{"location":"api/#GPUCellListSPH.pressure!-NTuple{6, Any}","page":"API","title":"GPUCellListSPH.pressure!","text":"pressure!(P, ρ, c₀, γ, ρ₀, ptype)\n\nEquation of State in Weakly-Compressible SPH.\n\nP = c_0^2 rho_0 * left  left( fracrhorho_0 right)^gamma  right\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.pressure-NTuple{5, Any}","page":"API","title":"GPUCellListSPH.pressure","text":"pressure(ρ, c₀, γ, ρ₀)\n\nEquation of State in Weakly-Compressible SPH\n\nP = c_0^2 rho_0 * left  left( fracrhorho_0 right)^gamma  right\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.sphW!-NTuple{5, Any}","page":"API","title":"GPUCellListSPH.sphW!","text":"sphW!(W, pairs, sphkernel, H⁻¹)\n\nCompute kernel values for each particles pair in list. Update W. See SPHKernels.jl for details.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.sph∇W!-NTuple{5, Any}","page":"API","title":"GPUCellListSPH.sph∇W!","text":"sph∇W!(∇W, pairs, points, kernel, H⁻¹)\n\nCompute gradients. Update ∇W. See SPHKernels.jl for details.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.sph∑W!-NTuple{6, Any}","page":"API","title":"GPUCellListSPH.sph∑W!","text":"sph∑W!(∑W, pairs, sphkernel, H⁻¹)\n\nCompute sum of kernel values for each particles pair in list. Add to ∑W. See SPHKernels.jl for details.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.sph∑∇W!-NTuple{6, Any}","page":"API","title":"GPUCellListSPH.sph∑∇W!","text":"sph∑∇W!(∑∇W, pairs, points, kernel, H⁻¹)\n\nCompute gradients. Add sum to ∑∇W. See SPHKernels.jl for details.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.stepsolve!","page":"API","title":"GPUCellListSPH.stepsolve!","text":"stepsolve!(prob::SPHProblem, n::Int = 1; timecall = nothing, timestepping = false, timelims = (-Inf, +Inf))\n\nMake n itarations. \n\ntimestepping - call Δt_stepping for adjust Δt\n\ntimelims - minimal and maximum values for Δt\n\n\n\n\n\n","category":"function"},{"location":"api/#GPUCellListSPH.symplectic_update!-NTuple{12, Any}","page":"API","title":"GPUCellListSPH.symplectic_update!","text":"symplectic_update!(ρ, ρΔt½, v, vΔt½, x, xΔt½, ∑∂ρ∂t, ∑∂v∂t,  Δt, ρ₀, isboundary, ml)\n\nSymplectic Position Verlet scheme.\n\nParshikov et al, 2000\nLeimkuhler and Matthews, 2016\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.timesolve!-Tuple{SPHProblem}","page":"API","title":"GPUCellListSPH.timesolve!","text":"timesolve!(prob::SPHProblem; batch = 10, \ntimeframe = 1.0, \nwritetime = 0, \npath = nothing, \npvc = false, \nvtkvars = [\"Acceleration\", \"Velocity\", \"Pressure\"],\ntimestepping = false, \ntimelims = (-Inf, +Inf), \nanim = false,\nplotsettings = Dict(:leg => false))\n\nMake simulation by batch iterations within timeframe. \n\nwritetime - time interval for write vtk / animation.\n\npath - path to export directory.\n\npvc - make PVD file.\n\nvtkvars - variables for export, full list:  [\"Acceleration\", \"Velocity\", \"Pressure\", \"Density\", \"∑W\", \"∑∇W\", \"DPC\"] \n\nanim - make animation.\n\nshowframe - show animation each frame.\n\nplotsettings - keywords for plotting.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.update!","page":"API","title":"GPUCellListSPH.update!","text":"update!(c::GPUCellList)\n\nFull update cell grid.\n\n\n\n\n\n","category":"function"},{"location":"api/#GPUCellListSPH.update_dpcreg!-NTuple{5, Any}","page":"API","title":"GPUCellListSPH.update_dpcreg!","text":"update_dpcreg!(v, x, ∑Δvdpc, Δt, ptype)\n\nUpdate velocity and position.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.update_vp∂v∂tΔt!-NTuple{4, Any}","page":"API","title":"GPUCellListSPH.update_vp∂v∂tΔt!","text":"update_vp∂v∂tΔt!(v, ∑∂v∂t, Δt, ptype)\n\nUpdate vlocity.\n\ntextbfv = textbfv + fracpartial textbfvpartial t * Delta t\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.update_xpvΔt!-Tuple{Any, Any, Any}","page":"API","title":"GPUCellListSPH.update_xpvΔt!","text":"update_xpvΔt!(x, v, Δt, ml)\n\ntextbfr = textbfr +  textbfv * Delta t\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.update_xsphcorr!-Tuple{Any, Any, Any}","page":"API","title":"GPUCellListSPH.update_xsphcorr!","text":"update_xsphcorr!(v, ∑Δvxsph, ptype)\n\nUpdate velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.update_ρp∂ρ∂tΔt!-NTuple{5, Any}","page":"API","title":"GPUCellListSPH.update_ρp∂ρ∂tΔt!","text":"update_ρp∂ρ∂tΔt!(ρ, ∑∂ρ∂t, Δt, ρ₀, ptype)\n\nUpdate dencity.\n\nrho = rho + fracpartial rhopartial t * Delta t\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.writecsv-Tuple{SPHProblem, Any}","page":"API","title":"GPUCellListSPH.writecsv","text":"writecsv(prob::SPHProblem, path; vtkvars = [\"Density\", \"Acceleration\", \"Velocity\"])\n\nwrite CSV file.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.xsphcorr!-NTuple{8, Any}","page":"API","title":"GPUCellListSPH.xsphcorr!","text":"xsphcorr!(∑Δvxsph, v, ρ, W, pairs, m₀)\n\nThe XSPH correction.\n\n\nhattextbfv_i = - epsilon sum m_j fractextbfv_ijoverlinerho_ij W_ij\n\n\nMonaghan JJ (1989) On the problem of penetration in particle methods. J Comput Phys. https://doi.org/10.1016/0021-9991(89)90032-6\nCarlos Alberto Dutra Fraga Filho, Reflective Boundary Conditions Coupled With the SPH Method for the Three-Dimensional Simulation of Fluid-Structure Interaction With Solid Boundaries\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.Δt_stepping-NTuple{8, Any}","page":"API","title":"GPUCellListSPH.Δt_stepping","text":"Δt_stepping(buf, a, v, points, c₀, h, CFL, timelims)\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.мaxpairs-Tuple{Any}","page":"API","title":"GPUCellListSPH.мaxpairs","text":"мaxpairs(cellpnum)\n\nMaximum number of pairs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.∂v∂t!-NTuple{7, Any}","page":"API","title":"GPUCellListSPH.∂v∂t!","text":"∂v∂t!(∑∂v∂t,  ∇W, pairs, m₀, ρ, c₀, γ, ρ₀)\n\nThe momentum equation (without dissipation and gravity). Add to ∑∂v∂t.\n\nfracpartial textbfv_ipartial t = - sum  m_j left( fracp_irho^2_i + fracp_jrho^2_j right) nabla_i W_ij\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.∂v∂t_addgrav!-Tuple{Any, Any}","page":"API","title":"GPUCellListSPH.∂v∂t_addgrav!","text":"∂v∂t_addgrav!(∑∂v∂t, gvec)\n\nAdd gravity to the momentum equation.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.∂v∂t_av!-NTuple{11, Any}","page":"API","title":"GPUCellListSPH.∂v∂t_av!","text":"∂v∂t_av!(∑∂v∂t, ∇W, pairs, points, h, ρ, α, v, c₀, m₀)\n\nCompute artificial viscosity part of ∂v∂t. Add to ∑∂v∂t.\n\nPi_ij = begincases frac- alpha overlinec_ij mu_ij + beta mu_ij^2 overlinerho_ij   textbfv_ij cdot textbfr_ij  0  0   otherwise endcases\n\nmu_ij = frach textbfv_ijcdot textbfr_ijr_ij^2 + eta^2\n\noverlinec_ij  = fracc_i + c_j2\n\noverlinerho_ij = fracrho_i + rho_j2\n\nbeta = 0\n\nc_ij = c_0\n\nm_i = m_j = m_0\n\n\nArtificial viscosity part of momentum equation. \n\nfracpartial textbfv_ipartial t = - sum  m_j Pi_ij nabla_i W_ij\n\nJ. Monaghan, Smoothed Particle Hydrodynamics, “Annual Review of Astronomy and Astrophysics”, 30 (1992), pp. 543-574.\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.∂v∂t_visc!-NTuple{10, Any}","page":"API","title":"GPUCellListSPH.∂v∂t_visc!","text":"∂v∂t_visc!(∑∂v∂t,  ∇W, pairs, m, ρ, c₀, γ, ρ₀)\n\nCompute laminar shear stresse part of ∂v∂t. Add to ∑∂v∂t.\n\nfracpartial textbfv_ipartial t = sum fracm_jrho_j  left( 2 nu_i fractextbfr_ij cdot nabla_i W_ij r_ij^2 right) textbfv_ij\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.∂v∂tpF!-NTuple{7, Any}","page":"API","title":"GPUCellListSPH.∂v∂tpF!","text":"∂v∂tpF!(∑∂v∂t, pairs, points, s, H)\n\nAdd surface tension to ∑∂v∂t. Modified.\n\nA. Tartakovsky and P. Meakin, Phys. Rev. E 72 (2005)\n\n\n\n\n\n","category":"method"},{"location":"api/#GPUCellListSPH.∂ρ∂tDDT!-Union{Tuple{T}, Tuple{CUDA.CuArray{T}, Vararg{Any, 13}}} where T","page":"API","title":"GPUCellListSPH.∂ρ∂tDDT!","text":"∂ρ∂tDDT!(∑∂ρ∂t::CuArray{T}, pairs, ∇W, ρ, v, points, h, m₀, ρ₀, c₀, γ, g, δᵩ, ptype; minthreads::Int = 1024)\n\nCompute ∂ρ∂t - density derivative includind density diffusion. Replace all values and update ∑∂ρ∂t.\n\n\nfracpartial rho_ipartial t = sum  m_j textbfv_ij cdot nabla_i W_ij + delta_Phi h c_0 sum Psi_ij cdot nabla_i W_ij fracm_jrho_j\n\n\n\nPsi_ij = 2 (rho_ij^T - rho_ij^H) fractextbfr_ijr_ij^2 + eta^2\n\n\n\nrho_ij^H = rho_0 left( sqrtgammafracP_ij^H + 1C_b - 1right)\n\n\n\nP_ij^H = rho_0 g z_ij\n\n\nz_ij - vertical distance.\n\n\n\n\n\n","category":"method"},{"location":"details/#Details","page":"Details","title":"Details","text":"","category":"section"},{"location":"details/#Denotation","page":"Details","title":"Denotation","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Particle indexes: i, j;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"W - kernel function value;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"nabla W - kernel function gradient;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"h -  smoothing length;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"H  2h - kernel support length;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"m m_i m_j  - mass;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"m_0 - reference mass;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"rho rho_i rho_j - dencity;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"rho_0 - reference dencity;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"P P_i P_j - pressure;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"Pi - viscous energy dissipation term (artificial viscosity);","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"textbfr textbfr_i textbfr_j - particle location (vector);","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"textbfr_ij = textbfr_i - textbfr_j - particle i to j distance (vector);","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"r_ij = sqrttextbfr_ji cdot textbfr_ji - particle i to j distance;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"textbfv textbfv_i textbfv_j - velocity (vector);","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"textbfv_ij = textbfv_i - textbfv_j - relative velocity  (vector);","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"V V_i V_j - volume;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"V_i = fracm_irho_i V_j = fracm_jrho_j","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"z_ij -  vertical distance","category":"page"},{"location":"details/#Constants","page":"Details","title":"Constants","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"g - gravity;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"c₀ - speed of sound at the reference density;","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"c_0 = c(rho_0) = sqrtfracpartial Ppartial rho","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"γ = 7 - gamma costant (pressure equation of state);","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"delta_Phi - coefficient for density diffusion;","category":"page"},{"location":"details/#Equation-of-State-in-Weakly-Compressible-SPH","page":"Details","title":"Equation of State in Weakly-Compressible SPH","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"P = c_0^2 rho_0 * left  left( fracrhorho_0 right)^gamma  right\n\n","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"Monaghan et al., 1999\nBatchelor, 1974","category":"page"},{"location":"details/#Artificial-Viscosity","page":"Details","title":"Artificial Viscosity","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"\nPi_ij = begincases frac- alpha overlinec_ij mu_ij + beta mu_ij^2 overlinerho_ij   textbfv_ijcdot textbfr_ij  0  0   otherwise endcases\n\n\n\n\noverlinec_ij  = fracc_i + c_j2\n\n\n\n\noverlinerho_ij = fracrho_i + rho_j2\n","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"Monaghan style artificial viscosity:","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"\nfracpartial textbfv_ipartial t = - sum  m_j Pi_ij nabla_i W_ij\n","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"J. Monaghan, “Smoothed particle hydrodynamics”, Reports on Progress in Physics, 68 (2005), pp. 1703-1759.","category":"page"},{"location":"details/#Laminar-shear-stresse","page":"Details","title":"Laminar shear stresse","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"fracpartial textbfv_ipartial t = sum fracm_jrho_j  left( 2 nu_i fractextbfr_ij cdot nabla_i W_ij r_ij^2 right) textbfv_ij","category":"page"},{"location":"details/#Momentum-Equation-with-Artificial-Viscosity","page":"Details","title":"Momentum Equation with Artificial Viscosity","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"fracpartial textbfv_ipartial t = - sum  m_j left( fracp_irho^2_i + fracp_jrho^2_j + Pi_ij right) nabla_i W_ij\n","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"J. Monaghan, Smoothed Particle Hydrodynamics, “Annual Review of Astronomy and Astrophysics”, 30 (1992), pp. 543-574.","category":"page"},{"location":"details/#Continuity-equation","page":"Details","title":"Continuity equation","text":"","category":"section"},{"location":"details/#Density-diffusion-term","page":"Details","title":"Density diffusion term","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"\nfracpartial rho_ipartial t = sum  m_j textbfv_ij cdot nabla_i W_ij + delta_Phi h c_0 sum Psi_ij cdot nabla_i W_ij fracm_jrho_j\n\n\n\n\n\nPsi_ij = 2 (rho_ij^T + rho_ij^H) fractextbfr_ijr_ij^2 + eta^2\n\n\n\nrho_ij^H = rho_0 left( sqrtgammafracP_ij^H + 1C_b - 1right)\n\n\n\nP_ij^H = rho_0 g z_ij\n","category":"page"},{"location":"details/#XSPH-correction","page":"Details","title":"XSPH correction","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Correction to avoid the particles' disordered movement and prevent penetration between them (Monaghan JJ, 1989).","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"hattextbfv_i = - epsilon sum m_j fractextbfv_ijoverlinerho_ij W_ij","category":"page"},{"location":"details/#Corrected-Smoothed-Particle-Method-(CSPM)","page":"Details","title":"Corrected Smoothed Particle Method (CSPM)","text":"","category":"section"},{"location":"details/#Density-Renormalisation.","page":"Details","title":"Density Renormalisation.","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Corrected Smoothed Particle Method (CSPM) Density Renormalisation (Chen et al. 1999).","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"\nrho_i^norm = fracsum m_j W_ijsum fracm_jrho_j W_ij","category":"page"},{"location":"details/#Dynamic-Particle-Collision-(DPC)-correction.","page":"Details","title":"Dynamic Particle Collision (DPC) correction.","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Dynamic pair-wise Particle Collision (DPC) technique adopting dynamic form of the collision and repulsive terms to improve the pressure field (Jandaghian et al. 2022).","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"\ndelta textbfv_i^DPC = sum k_ijfracm_jm_i + m_jv_ij^coll + fracDelta  trho_isum phi_ij frac2V_jV_i + V_jfracp_ij^br_ij^2 + eta^2textbfr_ij\n\n\n\n\n\n(v_ij^coll  quad phi_ij) = begincases (fractextbfv_ijcdot textbfr_ijr_ij^2 + eta^2textbfr_ji quad 0)  textbfv_ijcdot textbfr_ij  0  (0 quad 1)   otherwise endcases\n\n\n\n\np_ij^b = tildep_ij chi_ij \n\n\n\n\n\ntildep_ij = max(min(lambda p_i + p_j lambda p_max) p_min)\n\n\n\n\n\nchi_ij  = sqrtfracomega(r_ij l_0)omega(l_02 l_0)\n\n\n\n\n\nk_ij =  begincases chi_ij  05 le r_ijl_0  1  1  r_ijl_0  05 endcases\n","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"Mojtaba Jandaghian, Herman Musumari Siaben, Ahmad Shakibaeinia, Stability and accuracy of the weakly compressible SPH with particle regularization techniques https://arxiv.org/pdf/2110.10076.pdf","category":"page"},{"location":"details/#Shifting-algorithm","page":"Details","title":"Shifting algorithm","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Not done","category":"page"},{"location":"details/#Time-stepping","page":"Details","title":"Time stepping","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"TBD","category":"page"},{"location":"details/#Boundary-force","page":"Details","title":"Boundary force","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"The repulsive force exerted by the virtual particle on the fluid particle (Rapaport, 2004), n₁ = 12, n₂ = 4, D = 0.4.","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"F = D * fracleft( (fracr_0textbfr_ij)^n_1 - (fracr_0textbfr_ij)^n_2right)r_ij^2","category":"page"},{"location":"details/#Reference","page":"Details","title":"Reference","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Chen JK, Beraun JE, Carney TC (1999) A corrective smoothed particle method for boundary value problems in heat conduction. Int. J. Num. Meth. Engng. https://doi.org/10.1002/(SICI)1097-0207(19990920)46:2<231::AID-NME672>3.0.CO;2-K\nCarlos Alberto Dutra Fraga Filho, Reflective Boundary Conditions Coupled With the SPH Method for the Three-Dimensional Simulation of Fluid-Structure Interaction With Solid Boundaries, 2023 10.21203/rs.3.rs-3214518/v1 \nCarlos Alberto Dutra Fraga Filho, Julio Tomás Aquije Chacaltana,  Boundary treatment techniques in smoothed particle hydrodynamics: implementations in fluid and thermal sciences and results analysis\nJ. J. Monaghan, R. A. Gingold, Shock simulation by the particle method sph, Journal of Computational Physics 52 (1983) 374–389. doi:https: //doi.org/10.1016/0021-9991(83)90036-0\nMonaghan JJ (1989) On the problem of penetration in particle methods. J Comput Phys. https://doi.org/10.1016/0021-9991(89)90032-6\nJ. Monaghan, Smoothed Particle Hydrodynamics, “Annual Review of Astronomy and Astrophysics”, 30 (1992), pp. 543-574.\nJ. Monaghan, “Smoothed particle hydrodynamics”, Reports on Progress in Physics, 68 (2005), pp. 1703-1759.\nM. Jandaghian, A. Krimi, A. R. Zarrati, A. Shakibaeinia, Enhanced weakly-compressible mps method for violent free-surface flows: Role of particle regularization techniques, Journal of Computational Physics 434 (2021) 110202. doi:https://doi.org/10.1016/j.jcp.2021.110202.\nMojtaba Jandaghian, Herman Musumari Siaben, Ahmad Shakibaeinia, Stability and accuracy of the weakly compressible SPH with particle regularization techniques https://arxiv.org/pdf/2110.10076.pdf\nJ. P. Hughes and D. I. Graham, “Comparison of incompressible and weakly-compressible SPH models for free-surface water flows”, Journal of Hydraulic Research, 48 (2010), pp. 105-117.\nA. Ferrari et al., “A new 3D parallel SPH scheme for free surface flows”, Computers and Fluids, 38 (2009), pp. 1203–1217.\nGotoh, H., Shibahara, T. and Sakai, T. 2001 “Sub-particle-scale turbulence model for the MPSmethod — Lagrangian flow model for hydraulic engineering,” Comp. Fluid Dyn. J. 9(4)339–347 \nEdmond Y.M. Lo, Songdong Shao, Simulation of near-shore solitary wave mechanics by an incompressible SPH method, 2002","category":"page"},{"location":"details/#See-also","page":"Details","title":"See also","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"Pawan Negi, Prabhu Ramachandran, How to train your solver: Verification of boundary conditions for smoothed particle hydrodynamics, 2022\nhttps://github.com/DualSPHysics/DualSPHysics/wiki/3.-SPH-formulation\nhttps://pysph.readthedocs.io/en/1.0a1/reference/equations.html","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GPUCellListSPH","category":"page"},{"location":"#GPUCellListSPH","page":"Home","title":"GPUCellListSPH","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Smoothed-particle hydrodynamics (SPH) is a computational method used for simulating the mechanics of continuum media, such as solid mechanics and fluid flows. It was developed by Gingold and Monaghan and Lucy in 1977, initially for astrophysical problems. It has been used in many fields of research, including astrophysics, ballistics, volcanology, and oceanography. It is a meshfree Lagrangian method (where the co-ordinates move with the fluid), and the resolution of the method can easily be adjusted with respect to variables such as density. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Initially package was based on AhmedSalih3d work (SPHExample) and then taken new features.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also Smoothed Particle Hydrodynamics Manual.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Package working with CUDA.jl on GPU and not applicable for lunch on CPU. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Main goals\nMain goal of this package - make clear and readable implementation of SPH. Performance wasn't primary goal of this package so desing and used algorithms for computation on GPU and memory organization coud be not so efficient.  ","category":"page"},{"location":"#First-step","page":"Home","title":"First step","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple example to try SPH:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nsing GPUCellListSPH\nusing CSV, DataFrames, CUDA, BenchmarkTools, SPHKernels\n\npath = joinpath(dirname(pathof(GPUCellListSPH)))\n\nfluid_csv    = joinpath(path, \"../test/input/FluidPoints_Dp0.02.csv\")\nboundary_csv = joinpath(path, \"../test/input/BoundaryPoints_Dp0.02.csv\")\n\nDF_POINTS = append!(CSV.File(fluid_csv) |> DataFrame, CSV.File(boundary_csv) |> DataFrame)\ncpupoints = Tuple.(eachrow(DF_POINTS[!, [\"Points:0\", \"Points:2\"]])) # Load particles \n\ndx  = 0.02                  # resolution\nh   = 1.2 * sqrt(2) * dx    # smoothinl length\nH   = 2h                    # kernel support length\nh⁻¹ = 1/h\nH⁻¹ = 1/H\ndist = H                    # distance for neighborlist\nρ₀  = 1000.0                # reference dencity\nm₀  = ρ₀ * dx * dx          # reference mass\nα   = 0.01                  # Artificial viscosity constant\ng   = 9.81                  # gravity\nc₀  = sqrt(g * 2) * 20      # Speed of sound\nγ   = 7                     # Gamma costant, used in the pressure equation of state\nΔt  = dt  = 1e-5            # time step\nδᵩ  = 0.1                   # Coefficient for density diffusion\nCFL = 0.2                   # Courant–Friedrichs–Lewy condition for Δt stepping\ncellsize = (H, H)           # cell size\nsphkernel    = WendlandC2(Float64, 2) # SPH kernel from SPHKernels.jl\n\nsystem  = GPUCellList(cpupoints, cellsize, dist)\nN       = length(cpupoints)\nρ       = CUDA.zeros(Float64, N)\ncopyto!(ρ, DF_POINTS.Rhop)\nptype   = CUDA.zeros(Int32, N)\ncopyto!(ptype, DF_POINTS.ptype)\nv       = CUDA.fill((0.0, 0.0), length(cpupoints))\n\nsphprob =  SPHProblem(system, dx, h, H, sphkernel, ρ, v, ptype, ρ₀, m₀, Δt, α, g, c₀, γ, δᵩ, CFL)\n\n\ntimesolve!(sphprob; batch = 10, timeframe = 1.0, writetime = 0.02, path = \"D:/vtk/\", pvc = true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Save results\nIf you want so save results define path and set writetime; pvc = true make pvd file. To make animation output try anim = true.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other examples available here.","category":"page"},{"location":"#Principle-algorithm","page":"Home","title":"Principle algorithm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This part of stepsolve! shows how main quations aplied.","category":"page"},{"location":"","page":"Home","title":"Home","text":"        # kernels for each pair\n        W_2d!(prob.W, pairs, x, prob.H⁻¹, prob.sphkernel)\n        # kernels gradientfor each pair\n        ∇W_2d!(prob.∇W, pairs, x, prob.H⁻¹, prob.sphkernel)\n        # density derivative with density diffusion\n        ∂ρ∂tDDT!(prob.∑∂ρ∂t, pairs, prob.∇W, prob.ρ, prob.v, x, prob.h, prob.m₀, prob.ρ₀, prob.c₀, prob.γ, prob.g, prob.δᵩ, prob.ptype; minthreads = 256) \n        #  pressure\n        pressure!(prob.P, prob.ρ, prob.c₀, prob.γ, prob.ρ₀, prob.ptype) \n        # momentum equation \n        ∂v∂t!(prob.∑∂v∂t,  prob.∇W, prob.P, pairs,  prob.m₀, prob.ρ, prob.ptype) \n        # add artificial viscosity\n        ∂v∂t_av!(prob.∑∂v∂t, prob.∇W, pairs, x, prob.h, prob.ρ, prob.α, prob.v, prob.c₀, prob.m₀, prob.ptype)\n        # laminar shear stresse\n        if prob.𝜈 > 0\n            ∂v∂t_visc!(prob.∑∂v∂t, prob.∇W, prob.v, prob.ρ, x, pairs, prob.h, prob.m₀, prob.𝜈, prob.ptype)\n        end\n        # add gravity \n        ∂v∂t_addgrav!(prob.∑∂v∂t, gravvec(prob.g, prob.dim)) \n        #  Boundary forces\n        fbmolforce!(prob.∑∂v∂t, pairs, x, 0.4, 2 * prob.dx, prob.ptype)\n        # add surface tension if s > 0\n        if prob.s > 0\n            ∂v∂tpF!(prob.∑∂v∂t, pairs, x, prob.s, prob.h, prob.m₀, prob.ptype) \n        end\n        # following steps (update_ρ!, update_vp∂v∂tΔt!, update_xpvΔt!) can be done in one kernel \n        # calc ρ at Δt½\n        update_ρp∂ρ∂tΔt!(prob.ρΔt½, prob.∑∂ρ∂t, prob.Δt * 0.5, prob.ρ₀, prob.ptype)\n        # calc v at Δt½\n        update_vp∂v∂tΔt!(prob.vΔt½, prob.∑∂v∂t, prob.Δt * 0.5, prob.ptype) \n        # calc x at Δt½\n        update_xpvΔt!(prob.xΔt½, prob.vΔt½, prob.Δt * 0.5)","category":"page"},{"location":"#Docs","page":"Home","title":"Docs","text":"","category":"section"},{"location":"#Cell-list","page":"Home","title":"Cell list","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.GPUCellList","category":"page"},{"location":"#GPUCellListSPH.GPUCellList","page":"Home","title":"GPUCellListSPH.GPUCellList","text":"GPUCellList(points, cellsize, dist; mppcell = 0, mpairs = 0)\n\nMake cell list structure.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.update!","category":"page"},{"location":"#GPUCellListSPH.update!","page":"Home","title":"GPUCellListSPH.update!","text":"update!(c::GPUCellList)\n\nFull update cell grid.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.partialupdate!","category":"page"},{"location":"#GPUCellListSPH.partialupdate!","page":"Home","title":"GPUCellListSPH.partialupdate!","text":"partialupdate!(c::GPUCellList, fillzero::Bool = true)\n\nUpdate only distance \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.neighborlist","category":"page"},{"location":"#GPUCellListSPH.neighborlist","page":"Home","title":"GPUCellListSPH.neighborlist","text":"neighborlist(c::GPUCellList)\n\nList of pairs with distance.\n\n\n\n\n\n","category":"function"},{"location":"#SPH-problem-object","page":"Home","title":"SPH problem object","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.SPHProblem","category":"page"},{"location":"","page":"Home","title":"Home","text":"Object structure:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    system::GPUCellList\n    dim::Int\n    dx::T\n    h::T                                  # smoothing length\n    h⁻¹::T\n    H::T                                  # kernel support radius (2h)\n    H⁻¹::T\n    sphkernel::AbstractSPHKernel          # SPH kernel from SPHKernels.jl\n    ∑W::CuArray                           # sum of kernel values\n    ∑∇W                                   # sum of kernel gradients\n    W::CuArray                            # values of kernel gradient for each pair \n    ∇W::CuArray                           # values of kernel gradient for each pair \n    ∑∂v∂t                                 # acceleration (momentum equation)\n    ∑∂ρ∂t                                 # rho diffusion - density derivative function (with diffusion)\n    ρ::CuArray                            # rho\n    ρΔt½::CuArray                         # rho at t½  \n    v::CuArray                            # velocity\n    vΔt½::CuArray                         # velocity at t½  \n    xΔt½::CuArray                         # coordinates at xΔt½\n    P::CuArray                            # pressure (Equation of State in Weakly-Compressible SPH)\n    ptype::CuArray                        # particle type: 1 - fluid 1; 0 - boundary; -1 boundary hard layer \n    ρ₀::T                                 # Reference density\n    m₀::T                                 # Initial mass\n    Δt::T                                 # default Δt\n    α::T                                  # Artificial viscosity alpha constant\n    𝜈::T                                  # kinematic fluid viscosity\n    g::T                                  # gravity constant\n    c₀::T                                 # speed of sound\n    γ                                     # Gamma, 7 for water (used in the pressure equation of state)\n    s::T                                  # surface tension constant\n    δᵩ::T                                 # Coefficient for density diffusion, typically 0.1\n    CFL::T                                # CFL number for the simulation \n    buf::CuArray                          # buffer for dt calculation\n    buf2                                  # buffer \n    etime::T                              # simulation time\n    cΔx                                   # cumulative location changes in batch\n    nui::T                                # non update interval, update if maximum(maximum.(abs, prob.cΔx)) > 0.9 * prob.nui  \n    # Dynamic Particle Collision (DPC) \n    dpc_l₀::T                             # minimal distance\n    dpc_pmin::T                           # minimal pressure\n    dpc_pmax::T                           # maximum pressure\n    dpc_λ::T                              # λ is a non-dimensional adjusting parameter\n    # XSPH\n    xsph_𝜀::T                             # xsph constant","category":"page"},{"location":"#Processing-functions","page":"Home","title":"Processing functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.stepsolve!","category":"page"},{"location":"#GPUCellListSPH.stepsolve!","page":"Home","title":"GPUCellListSPH.stepsolve!","text":"stepsolve!(prob::SPHProblem, n::Int = 1; timecall = nothing, timestepping = false, timelims = (-Inf, +Inf))\n\nMake n itarations. \n\ntimestepping - call Δt_stepping for adjust Δt\n\ntimelims - minimal and maximum values for Δt\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.timesolve!","category":"page"},{"location":"#GPUCellListSPH.timesolve!","page":"Home","title":"GPUCellListSPH.timesolve!","text":"timesolve!(prob::SPHProblem; batch = 10, \ntimeframe = 1.0, \nwritetime = 0, \npath = nothing, \npvc = false, \nvtkvars = [\"Acceleration\", \"Velocity\", \"Pressure\"],\ntimestepping = false, \ntimelims = (-Inf, +Inf), \nanim = false,\nplotsettings = Dict(:leg => false))\n\nMake simulation by batch iterations within timeframe. \n\nwritetime - time interval for write vtk / animation.\n\npath - path to export directory.\n\npvc - make PVD file.\n\nvtkvars - variables for export, full list:  [\"Acceleration\", \"Velocity\", \"Pressure\", \"Density\", \"∑W\", \"∑∇W\", \"DPC\"] \n\nanim - make animation.\n\nshowframe - show animation each frame.\n\nplotsettings - keywords for plotting.\n\n\n\n\n\n","category":"function"},{"location":"#Main-equations","page":"Home","title":"Main equations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∑W_2d!","category":"page"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∑∇W_2d!","category":"page"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∂ρ∂tDDT!","category":"page"},{"location":"#GPUCellListSPH.∂ρ∂tDDT!","page":"Home","title":"GPUCellListSPH.∂ρ∂tDDT!","text":"∂ρ∂tDDT!(∑∂ρ∂t::CuArray{T}, pairs, ∇W, ρ, v, points, h, m₀, ρ₀, c₀, γ, g, δᵩ, ptype; minthreads::Int = 1024)\n\nCompute ∂ρ∂t - density derivative includind density diffusion. Replace all values and update ∑∂ρ∂t.\n\n\nfracpartial rho_ipartial t = sum  m_j textbfv_ij cdot nabla_i W_ij + delta_Phi h c_0 sum Psi_ij cdot nabla_i W_ij fracm_jrho_j\n\n\n\nPsi_ij = 2 (rho_ij^T - rho_ij^H) fractextbfr_ijr_ij^2 + eta^2\n\n\n\nrho_ij^H = rho_0 left( sqrtgammafracP_ij^H + 1C_b - 1right)\n\n\n\nP_ij^H = rho_0 g z_ij\n\n\nz_ij - vertical distance.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.pressure!","category":"page"},{"location":"#GPUCellListSPH.pressure!","page":"Home","title":"GPUCellListSPH.pressure!","text":"pressure!(P, ρ, c₀, γ, ρ₀, ptype)\n\nEquation of State in Weakly-Compressible SPH.\n\nP = c_0^2 rho_0 * left  left( fracrhorho_0 right)^gamma  right\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∂v∂t!","category":"page"},{"location":"#GPUCellListSPH.∂v∂t!","page":"Home","title":"GPUCellListSPH.∂v∂t!","text":"∂v∂t!(∑∂v∂t,  ∇W, pairs, m₀, ρ, c₀, γ, ρ₀)\n\nThe momentum equation (without dissipation and gravity). Add to ∑∂v∂t.\n\nfracpartial textbfv_ipartial t = - sum  m_j left( fracp_irho^2_i + fracp_jrho^2_j right) nabla_i W_ij\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∂v∂t_av!","category":"page"},{"location":"#GPUCellListSPH.∂v∂t_av!","page":"Home","title":"GPUCellListSPH.∂v∂t_av!","text":"∂v∂t_av!(∑∂v∂t, ∇W, pairs, points, h, ρ, α, v, c₀, m₀)\n\nCompute artificial viscosity part of ∂v∂t. Add to ∑∂v∂t.\n\nPi_ij = begincases frac- alpha overlinec_ij mu_ij + beta mu_ij^2 overlinerho_ij   textbfv_ij cdot textbfr_ij  0  0   otherwise endcases\n\nmu_ij = frach textbfv_ijcdot textbfr_ijr_ij^2 + eta^2\n\noverlinec_ij  = fracc_i + c_j2\n\noverlinerho_ij = fracrho_i + rho_j2\n\nbeta = 0\n\nc_ij = c_0\n\nm_i = m_j = m_0\n\n\nArtificial viscosity part of momentum equation. \n\nfracpartial textbfv_ipartial t = - sum  m_j Pi_ij nabla_i W_ij\n\nJ. Monaghan, Smoothed Particle Hydrodynamics, “Annual Review of Astronomy and Astrophysics”, 30 (1992), pp. 543-574.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∂v∂t_visc!","category":"page"},{"location":"#GPUCellListSPH.∂v∂t_visc!","page":"Home","title":"GPUCellListSPH.∂v∂t_visc!","text":"∂v∂t_visc!(∑∂v∂t,  ∇W, pairs, m, ρ, c₀, γ, ρ₀)\n\nCompute laminar shear stresse part of ∂v∂t. Add to ∑∂v∂t.\n\nfracpartial textbfv_ipartial t = sum fracm_jrho_j  left( 2 nu_i fractextbfr_ij cdot nabla_i W_ij r_ij^2 right) textbfv_ij\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∂v∂t_addgrav!","category":"page"},{"location":"#GPUCellListSPH.∂v∂t_addgrav!","page":"Home","title":"GPUCellListSPH.∂v∂t_addgrav!","text":"∂v∂t_addgrav!(∑∂v∂t, gvec)\n\nAdd gravity to the momentum equation.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.∂v∂tpF!","category":"page"},{"location":"#GPUCellListSPH.∂v∂tpF!","page":"Home","title":"GPUCellListSPH.∂v∂tpF!","text":"∂v∂tpF!(∑∂v∂t, pairs, points, s, H)\n\nAdd surface tension to ∑∂v∂t. Modified.\n\nA. Tartakovsky and P. Meakin, Phys. Rev. E 72 (2005)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.dpcreg!","category":"page"},{"location":"#GPUCellListSPH.dpcreg!","page":"Home","title":"GPUCellListSPH.dpcreg!","text":"dpcreg!(∑Δvdpc, v, ρ, P, pairs, points, sphkernel, l₀, Pmin, Pmax, Δt, λ, dpckernlim)\n\nDynamic Particle Collision (DPC) correction. Replace all values and update ∑Δvdpc.\n\ndelta textbfv_i^DPC = sum k_ijfracm_jm_i + m_jv_ij^coll + fracDelta  trho_isum phi_ij frac2V_jV_i + V_jfracp_ij^br_ij^2 + eta^2textbfr_ij\n\n\n\n(v_ij^coll  quad phi_ij) = begincases (fractextbfv_ijcdot textbfr_ijr_ij^2 + eta^2textbfr_ji quad 0)  textbfv_ijcdot textbfr_ij  0  (0 quad 1)   otherwise endcases\n\n\np_ij^b = tildep_ij chi_ij \n\n\n\ntildep_ij = max(min(lambda p_i + p_j lambda p_max) p_min)\n\n\n\nchi_ij  = sqrtfracomega(r_ij l_0)omega(l_02 l_0)\n\n\n\nk_ij =  begincases chi_ij  05 le r_ijl_0  1  1  r_ijl_0  05 endcases\n\n\nMojtaba Jandaghian, Herman Musumari Siaben, Ahmad Shakibaeinia, Stability and accuracy of the weakly compressible SPH with particle regularization techniques https://arxiv.org/pdf/2110.10076.pdf\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.cspmcorr!","category":"page"},{"location":"#GPUCellListSPH.cspmcorr!","page":"Home","title":"GPUCellListSPH.cspmcorr!","text":"cspmcorr!(∑ρcspm1, ∑ρcspm2, ρ, m₀, pairs, points, sphkernel, H⁻¹)\n\nCorrected Smoothed Particle Method (CSPM) Density Renormalisation.\n\n\nrho_i^norm = fracsum m_j Wsum fracm_jrho_j W\n\nChen JK, Beraun JE, Carney TC (1999) A corrective smoothed particle method for boundary value problems in heat conduction. Int. J. Num. Meth. Engng. https://doi.org/10.1002/(SICI)1097-0207(19990920)46:2<231::AID-NME672>3.0.CO;2-K\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.xsphcorr!","category":"page"},{"location":"#GPUCellListSPH.xsphcorr!","page":"Home","title":"GPUCellListSPH.xsphcorr!","text":"xsphcorr!(∑Δvxsph, v, ρ, W, pairs, m₀)\n\nThe XSPH correction.\n\n\nhattextbfv_i = - epsilon sum m_j fractextbfv_ijoverlinerho_ij W_ij\n\n\nMonaghan JJ (1989) On the problem of penetration in particle methods. J Comput Phys. https://doi.org/10.1016/0021-9991(89)90032-6\nCarlos Alberto Dutra Fraga Filho, Reflective Boundary Conditions Coupled With the SPH Method for the Three-Dimensional Simulation of Fluid-Structure Interaction With Solid Boundaries\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.fbmolforce!","category":"page"},{"location":"#GPUCellListSPH.fbmolforce!","page":"Home","title":"GPUCellListSPH.fbmolforce!","text":"fbmolforce!(∑∂v∂t, pairs, points, d, r₀, ptype)\n\nThe repulsive force exerted by the virtual particle on the fluid particle.\n\nF = D * fracleft( (fracr_0textbfr_ij)^n_1 - (fracr_0textbfr_ij)^n_2right)r_ij^2\n\nRapaport, 2004\n\nn₁ = 12\n\nn₂ = 4\n\n\n\n\n\n","category":"function"},{"location":"#Export-functions","page":"Home","title":"Export functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.makedf","category":"page"},{"location":"#GPUCellListSPH.makedf","page":"Home","title":"GPUCellListSPH.makedf","text":"makedf(prob::SPHProblem; vtkvars = [\"Density\", \"Acceleration\", \"Velocity\"])\n\nMake DataFrame from SPH Problem.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"GPUCellListSPH.writecsv","category":"page"},{"location":"#GPUCellListSPH.writecsv","page":"Home","title":"GPUCellListSPH.writecsv","text":"writecsv(prob::SPHProblem, path; vtkvars = [\"Density\", \"Acceleration\", \"Velocity\"])\n\nwrite CSV file.\n\n\n\n\n\n","category":"function"},{"location":"#Reference","page":"Home","title":"Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"R.A. Gingold; J.J. Monaghan (1977). \"Smoothed particle hydrodynamics: theory and application to non-spherical stars\". Mon. Not. R. Astron. Soc. 181 (3): 375–89. Bibcode:1977MNRAS.181..375G. doi:10.1093/mnras/181.3.375.\nL.B. Lucy (1977). \"A numerical approach to the testing of the fission hypothesis\". Astron. J. 82: 1013–1024. Bibcode:1977AJ.....82.1013L. doi:10.1086/112164.","category":"page"}]
}
